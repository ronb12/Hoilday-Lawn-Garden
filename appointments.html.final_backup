<!DOCTYPE html><html lang="en"><head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Appointments - Admin Dashboard</title>
    <meta name="description" content="Manage appointments for Holliday Lawn &amp; Garden">
    <link rel="stylesheet" href="assets/css/main.css">
    <link rel="stylesheet" href="assets/css/admin-dashboard.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="icon" type="image/png" href="assets/icons/favicon-32x32.png" sizes="32x32">
    <link rel="icon" type="image/png" href="assets/icons/favicon-16x16.png" sizes="16x16">
    <link rel="apple-touch-icon" href="assets/icons/apple-touch-icon.png">
    <link rel="manifest" href="site.webmanifest">
    <meta name="theme-color" content="#2e7d32">
    <style>
        body {
            margin: 0;
            font-family: 'Montserrat', Arial, sans-serif;
            background: #f8f9fa;
            color: #222;
        }
        
        .admin-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            background: #fff;
            padding: 1.5rem 2rem;
            box-shadow: 0 2px 8px rgba(0,0,0,0.07);
            position: sticky;
            top: 0;
            z-index: 100;
        }
        
        .admin-header .logo {
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        
        .admin-header .logo img {
            height: 48px;
            width: auto;
        }
        
        .admin-nav {
            display: flex;
            gap: 2rem;
            align-items: center;
        }
        
        .admin-nav a {
            color: #2c5530;
            text-decoration: none;
            font-weight: 600;
            transition: color 0.2s;
        }
        
        .admin-nav a:hover, .admin-nav a.active {
            color: #4caf50;
        }
        
        .btn {
            padding: 0.7rem 1.5rem;
            border-radius: 6px;
            border: none;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .btn-primary {
            background: #4caf50;
            color: white;
        }
        
        .btn-primary:hover {
            background: #388e3c;
        }
        
        .btn-secondary {
            background: #2196f3;
            color: white;
        }
        
        .btn-secondary:hover {
            background: #1976d2;
        }
        
        .btn-danger {
            background: #f44336;
            color: white;
        }
        
        .btn-danger:hover {
            background: #d32f2f;
        }
        
        .dashboard-main {
            max-width: 1400px;
            margin: 2rem auto;
            padding: 0 2rem;
        }
        
        .page-header {
            background: #fff;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.07);
            margin-bottom: 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .page-title {
            font-size: 2rem;
            font-weight: 700;
            color: #2c5530;
            margin: 0;
        }
        
        .page-subtitle {
            color: #666;
            margin: 0.5rem 0 0 0;
        }
        
        .filters-section {
            background: #fff;
            padding: 1.5rem;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.07);
            margin-bottom: 2rem;
        }
        
        .filters-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            align-items: end;
        }
        
        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }
        
        .filter-group label {
            font-weight: 600;
            color: #333;
            font-size: 0.9rem;
        }
        
        .filter-group select, .filter-group input {
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 1rem;
            background: #fff;
        }
        
        .appointments-table {
            background: #fff;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.07);
            overflow: hidden;
        }
        
        .table-header {
            background: #f8f9fa;
            padding: 1rem 1.5rem;
            border-bottom: 1px solid #e0e0e0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .table-title {
            font-weight: 600;
            color: #333;
            margin: 0;
        }
        
        .table-actions {
            display: flex;
            gap: 0.5rem;
        }
        
        .table-container {
            overflow-x: auto;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
        }
        
        th, td {
            padding: 1rem 1.5rem;
            text-align: left;
            border-bottom: 1px solid #e0e0e0;
        }
        
        th {
            background: #f8f9fa;
            font-weight: 600;
            color: #333;
            font-size: 0.9rem;
        }
        
        tr:hover {
            background: #f8f9fa;
        }
        
        .status-badge {
            padding: 0.3rem 0.8rem;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 600;
            text-transform: capitalize;
        }
        
        .status-scheduled {
            background: #e3f2fd;
            color: #1976d2;
        }
        
        .status-completed {
            background: #e8f5e8;
            color: #2e7d32;
        }
        
        .status-cancelled {
            background: #ffebee;
            color: #d32f2f;
        }
        
        .status-pending {
            background: #fff3e0;
            color: #f57c00;
        }
        
        .action-buttons {
            display: flex;
            gap: 0.5rem;
        }
        
        .btn-small {
            padding: 0.4rem 0.8rem;
            border-radius: 6px;
            border: none;
            font-size: 0.85rem;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .empty-state {
            text-align: center;
            padding: 3rem;
            color: #666;
        }
        
        .empty-state i {
            font-size: 3rem;
            color: #ddd;
            margin-bottom: 1rem;
        }
        
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        
        .modal-content {
            background-color: #fff;
            margin: 5% auto;
            padding: 2rem;
            border-radius: 12px;
            width: 90%;
            max-width: 600px;
            max-height: 80vh;
            overflow-y: auto;
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }
        
        .modal-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #333;
            margin: 0;
        }
        
        .close {
            font-size: 1.5rem;
            font-weight: bold;
            cursor: pointer;
            color: #666;
        }
        
        .close:hover {
            color: #333;
        }
        
        .form-group {
            margin-bottom: 1.5rem;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #333;
        }
        
        .form-group input, .form-group select, .form-group textarea {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 1rem;
            box-sizing: border-box;
        }
        
        .form-group textarea {
            resize: vertical;
            min-height: 100px;
        }
        
        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }
        
        .form-actions {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
            margin-top: 2rem;
        }
        
        /* Mobile menu styles */
        .admin-header .hamburger {
            display: none;
            flex-direction: column;
            cursor: pointer;
            padding: 0.5rem;
            background: none;
            border: none;
        }
        
        .admin-header .hamburger span {
            width: 25px;
            height: 3px;
            background: #2c5530;
            margin: 3px 0;
            transition: 0.3s;
        }
        
        .admin-header .hamburger.active span:nth-child(1) {
            transform: rotate(-45deg) translate(-5px, 6px);
        }
        
        .admin-header .hamburger.active span:nth-child(2) {
            opacity: 0;
        }
        
        .admin-header .hamburger.active span:nth-child(3) {
            transform: rotate(45deg) translate(-5px, -6px);
        }
        
        @media (max-width: 768px) {
            .admin-header {
                padding: 1rem;
                flex-wrap: wrap;
                gap: 1rem;
            }
            .admin-header .logo {
                flex: 1;
                min-width: 0;
            }
            .admin-header .logo img {
                height: 40px;
            }
            .admin-header .logo span {
                font-size: 1.1rem;
            }
            .admin-header .admin-nav {
                display: none;
                position: absolute;
                top: 100%;
                left: 0;
                right: 0;
                background: #fff;
                flex-direction: column;
                padding: 1rem;
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                order: 3;
                width: 100%;
            }
            
            .admin-header .admin-nav.active {
                display: flex;
            }
            
            .admin-header .hamburger {
                display: flex;
                order: 2;
            }
            
            .admin-header .admin-actions {
                flex-direction: column;
                gap: 0.5rem;
                order: 1;
            }
            .admin-header .btn {
                padding: 0.6rem 1rem;
                font-size: 0.9rem;
            }
            
            .dashboard-main {
                padding: 0 1rem;
            }
            
            .page-header {
                flex-direction: column;
                gap: 1rem;
                align-items: flex-start;
            }
            
            .filters-row {
                grid-template-columns: 1fr;
            }
        }
        
        @media (max-width: 480px) {
            .admin-header {
                padding: 0.75rem;
            }
            .admin-header .logo span {
                font-size: 1rem;
            }
            .admin-header .btn {
                padding: 0.5rem 0.75rem;
                font-size: 0.85rem;
            }
            
            .dashboard-main {
                padding: 0 0.5rem;
            }
            
            .page-title {
                font-size: 1.8rem;
            }
        }
    </style>

    <style>
        /* Mobile Menu Styles */
        .hamburger {
            display: none;
            cursor: pointer;
            padding: 15px;
            z-index: 1000;
            position: relative;
            background: none;
            border: none;
            -webkit-tap-highlight-color: transparent;
            margin-right: 10px;
        }

        .hamburger span {
            display: block;
            width: 25px;
            height: 3px;
            background-color: #2e7d32;
            margin: 5px 0;
            transition: 0.3s;
        }

        .hamburger.active span:nth-child(1) {
            transform: rotate(-45deg) translate(-5px, 6px);
        }

        .hamburger.active span:nth-child(2) {
            opacity: 0;
        }

        .hamburger.active span:nth-child(3) {
            transform: rotate(45deg) translate(-5px, -6px);
        }

        @media (max-width: 768px) {
            .hamburger {
                display: block;
            }

            .nav-links {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100vh;
                background: rgba(255, 255, 255, 0.98);
                backdrop-filter: blur(8px);
                -webkit-backdrop-filter: blur(8px);
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                gap: 2.5rem;
                z-index: 1000;
                visibility: hidden;
                opacity: 0;
                transform: translateY(-100%);
                transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
                pointer-events: none;
                padding: 2rem;
            }

            .nav-links.active {
                visibility: visible;
                opacity: 1;
                transform: translateY(0);
                pointer-events: auto;
            }

            .nav-links a {
                font-size: 1.75rem;
                padding: 1rem 2rem;
                width: 100%;
                text-align: center;
                transition: all 0.3s ease;
                position: relative;
                color: #333333;
                font-weight: 600;
            }

            .nav-links a::after {
                content: '';
                position: absolute;
                bottom: 0;
                left: 50%;
                width: 0;
                height: 3px;
                background: #2e7d32;
                transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
                transform: translateX(-50%);
            }

            .nav-links a:hover::after,
            .nav-links a.active::after {
                width: 60%;
            }

            .nav-links a:hover {
                color: #2e7d32;
                transform: translateY(-2px);
            }

            body.menu-open {
                overflow: hidden;
                position: fixed;
                width: 100%;
                height: 100%;
            }
        }

        /* Prevent text selection during menu transitions */
        .nav-links {
            user-select: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
        }

        /* Ensure smooth scrolling on iOS */
        html {
            -webkit-overflow-scrolling: touch;
        }
    </style>
</head>
<body>
    <header class="admin-header">
        <div class="logo">
            <img src="assets/images/hollidays-logo.optimized-1280.png" alt="Holliday's Lawn &amp; Garden Logo">
            <span style="font-size:1.3rem;font-weight:700;color:#2c5530;">Admin Dashboard</span>
        </div>
        <nav class="admin-nav">
            <a href="admin-dashboard.html">Dashboard</a>
            <a href="appointments.html" class="active">Appointments</a>
            <a href="customers.html">Customers</a>
            <a href="payments.html">Payments</a>
            <a href="analytics.html">Analytics</a>
        </nav>
        <div class="admin-actions">
            <button class="btn btn-secondary" onclick="location.reload()">
                <i class="fas fa-sync-alt"></i> Refresh
            </button>
            <button class="btn btn-danger" onclick="window.location.href='admin-login.html'">
                <i class="fas fa-sign-out-alt"></i> Logout
            </button>
        </div>
        <button class="hamburger" onclick="toggleMenu()" aria-label="Toggle menu" aria-controls="nav-menu" aria-expanded="false">
            <span></span>
            <span></span>
            <span></span>
        </button>
    
    <button class="hamburger" aria-label="Toggle menu" aria-expanded="false" aria-controls="nav-menu">
        <span></span>
        <span></span>
        <span></span>
    </button>
    <nav id="nav-menu">
        <ul class="nav-links">
            <li><a href="index.html">Home</a></li>
            <li><a href="about.html">About</a></li>
            <li><a href="services.html">Services</a></li>
            <li><a href="education.html">Education</a></li>
            <li><a href="faq.html">FAQ</a></li>
            <li><a href="contact.html">Contact</a></li>
            <li><a href="pay-your-bill.html">Pay Your Bill</a></li>
            <li class="login-buttons">
                <a href="login.html" class="btn-login btn-customer">
                    <i class="fas fa-user"></i>
                    Customer Login
                </a>
                <a href="admin-login.html" class="btn-login btn-admin">
                    <i class="fas fa-lock"></i>
                    Admin Login
                </a>
            </li>
        </ul>
    </nav>
</header>

    <main class="dashboard-main">
        <div class="page-header">
            <div>
                <h1 class="page-title">Appointments</h1>
                <p class="page-subtitle">Manage and view all customer appointments</p>
            </div>
            <button class="btn btn-primary" onclick="openAddModal()">
                <i class="fas fa-plus"></i> Add Appointment
            </button>
        </div>

        <div class="filters-section">
            <div class="filters-row">
                <div class="filter-group">
                    <label>Status</label>
                    <select id="statusFilter" onchange="filterAppointments()">
                        <option value="">All Statuses</option>
                        <option value="scheduled">Scheduled</option>
                        <option value="completed">Completed</option>
                        <option value="cancelled">Cancelled</option>
                        <option value="pending">Pending</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label>Service Type</label>
                    <select id="serviceFilter" onchange="filterAppointments()">
                        <option value="">All Services</option>
                        <option value="lawn-maintenance">Lawn Maintenance</option>
                        <option value="landscaping">Landscaping</option>
                        <option value="garden-care">Garden Care</option>
                        <option value="commercial">Commercial Services</option>
                        <option value="pressure-washing">Pressure Washing</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label>Date From</label>
                    <input type="date" id="dateFromFilter" onchange="filterAppointments()">
                </div>
                <div class="filter-group">
                    <label>Date To</label>
                    <input type="date" id="dateToFilter" onchange="filterAppointments()">
                </div>
                <div class="filter-group">
                    <label>&nbsp;</label>
                    <button class="btn btn-secondary" onclick="clearFilters()">
                        <i class="fas fa-times"></i> Clear Filters
                    </button>
                </div>
            </div>
        </div>

        <div class="table-container">
            <div class="table-header">
                <h2 class="table-title">All Appointments</h2>
                <div class="table-actions">
                    <button class="btn btn-secondary" onclick="exportAppointments()">
                        <i class="fas fa-download"></i> Export
                    </button>
                </div>
            </div>
            <div class="table-wrapper">
                <table id="appointmentsTable">
                    <thead>
                        <tr>
                            <th>Customer</th>
                            <th>Service</th>
                            <th>Date &amp; Time</th>
                            <th>Status</th>
                            <th>Phone</th>
                            <th>Address</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="appointmentsTableBody">
                        <tr>
                            <td colspan="7">
                                <div class="empty-state">
                                    <i class="fas fa-calendar-times"></i>
                                    <h3>No Appointments Found</h3>
                                    <p>There are no appointments matching your criteria.</p>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </main>

    <!-- Add/Edit Appointment Modal -->
    <div id="appointmentModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title" id="modalTitle">Add New Appointment</h2>
                <span class="close" onclick="closeModal()">×</span>
            </div>
            <form id="appointmentForm" onsubmit="saveAppointment(event)">
                <div class="form-row">
                    <div class="form-group">
                        <label for="customerName">Customer Name *</label>
                        <input type="text" id="customerName" name="customerName" required="">
                    </div>
                    <div class="form-group">
                        <label for="phone">Phone Number *</label>
                        <input type="tel" id="phone" name="phone" required="">
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="email">Email</label>
                        <input type="email" id="email" name="email">
                    </div>
                    <div class="form-group">
                        <label for="serviceType">Service Type *</label>
                        <select id="serviceType" name="serviceType" required="">
                            <option value="">Select Service</option>
                            <option value="lawn-maintenance">Lawn Maintenance</option>
                            <option value="landscaping">Landscaping</option>
                            <option value="garden-care">Garden Care</option>
                            <option value="commercial">Commercial Services</option>
                            <option value="pressure-washing">Pressure Washing</option>
                        </select>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="appointmentDate">Date *</label>
                        <input type="date" id="appointmentDate" name="appointmentDate" required="">
                    </div>
                    <div class="form-group">
                        <label for="appointmentTime">Time *</label>
                        <input type="time" id="appointmentTime" name="appointmentTime" required="">
                    </div>
                </div>
                <div class="form-group">
                    <label for="address">Address *</label>
                    <textarea id="address" name="address" required=""></textarea>
                </div>
                <div class="form-group">
                    <label for="notes">Notes</label>
                    <textarea id="notes" name="notes"></textarea>
                </div>
                <div class="form-group">
                    <label for="status">Status</label>
                    <select id="status" name="status">
                        <option value="scheduled">Scheduled</option>
                        <option value="pending">Pending</option>
                        <option value="completed">Completed</option>
                        <option value="cancelled">Cancelled</option>
                    </select>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i> Save Appointment
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore-compat.js"></script>
    <script>
        // Firebase configuration
        const firebaseConfig = {
            apiKey: "AIzaSyACm0j7I8RX4ExIQRoejfk1HZMOQRGigBw",
            authDomain: "holiday-lawn-and-garden.firebaseapp.com",
            projectId: "holiday-lawn-and-garden",
            storageBucket: "holiday-lawn-and-garden.firebasestorage.app",
            messagingSenderId: "135322230444",
            appId: "1:135322230444:web:1a487b25a48aae07368909",
            measurementId: "G-KD6TBWR4ZT"
        };
        firebase.initializeApp(firebaseConfig);
        
        // Initialize Firestore
        const db = firebase.firestore();
        let appointments = [];
        let currentEditId = null;
        
        // Load appointments
        async function loadAppointments() {
            try {
                showLoading();
                const appointmentsSnapshot = await db.collection('appointments').orderBy('appointmentDate', 'desc').get();
                appointments = appointmentsSnapshot.docs.map(doc => ({
                    id: doc.id,
                    ...doc.data()
                }));
                displayAppointments(appointments);
                hideLoading();
            } catch (error) {
                console.error('Error loading appointments:', error);
                hideLoading();
                showNotification('Error loading appointments', 'error');
            }
        }
        
        // Display appointments in table
        function displayAppointments(appointmentsToShow) {
            const tbody = document.getElementById('appointmentsTableBody');
            
            if (appointmentsToShow.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="7">
                            <div class="empty-state">
                                <i class="fas fa-calendar-times"></i>
                                <h3>No Appointments Found</h3>
                                <p>There are no appointments matching your criteria.</p>
                            </div>
                        </td>
                    </tr>
                `;
                return;
            }
            
            tbody.innerHTML = appointmentsToShow.map(appointment => `
                <tr>
                    <td><strong>${appointment.customerName || 'N/A'}</strong></td>
                    <td>${appointment.serviceType || 'N/A'}</td>
                    <td>${formatDate(appointment.appointmentDate)} ${appointment.appointmentTime || ''}</td>
                    <td><span class="status-badge status-${appointment.status || 'scheduled'}">${appointment.status || 'scheduled'}</span></td>
                    <td>${appointment.phone || 'N/A'}</td>
                    <td>${appointment.address || 'N/A'}</td>
                    <td>
                        <div class="action-buttons">
                            <button class="btn-small btn-secondary" onclick="editAppointment('${appointment.id}')">
                                <i class="fas fa-edit"></i> Edit
                            </button>
                            <button class="btn-small btn-primary" onclick="completeAppointment('${appointment.id}')">
                                <i class="fas fa-check"></i> Complete
                            </button>
                            <button class="btn-small btn-danger" onclick="deleteAppointment('${appointment.id}')">
                                <i class="fas fa-trash"></i> Delete
                            </button>
                        </div>
                    </td>
                </tr>
            `).join('');
        }
        
        // Filter appointments
        function filterAppointments() {
            const statusFilter = document.getElementById('statusFilter').value;
            const serviceFilter = document.getElementById('serviceFilter').value;
            const dateFromFilter = document.getElementById('dateFromFilter').value;
            const dateToFilter = document.getElementById('dateToFilter').value;
            
            let filtered = appointments.filter(appointment => {
                if (statusFilter && appointment.status !== statusFilter) return false;
                if (serviceFilter && appointment.serviceType !== serviceFilter) return false;
                if (dateFromFilter && appointment.appointmentDate < dateFromFilter) return false;
                if (dateToFilter && appointment.appointmentDate > dateToFilter) return false;
                return true;
            });
            
            displayAppointments(filtered);
        }
        
        // Clear filters
        function clearFilters() {
            document.getElementById('statusFilter').value = '';
            document.getElementById('serviceFilter').value = '';
            document.getElementById('dateFromFilter').value = '';
            document.getElementById('dateToFilter').value = '';
            displayAppointments(appointments);
        }
        
        // Modal functions
        function openAddModal() {
            currentEditId = null;
            document.getElementById('modalTitle').textContent = 'Add New Appointment';
            document.getElementById('appointmentForm').reset();
            document.getElementById('appointmentModal').style.display = 'block';
        }
        
        function closeModal() {
            document.getElementById('appointmentModal').style.display = 'none';
            currentEditId = null;
        }
        
        // Edit appointment
        async function editAppointment(id) {
            const appointment = appointments.find(a => a.id === id);
            if (!appointment) return;
            
            currentEditId = id;
            document.getElementById('modalTitle').textContent = 'Edit Appointment';
            
            // Fill form
            document.getElementById('customerName').value = appointment.customerName || '';
            document.getElementById('phone').value = appointment.phone || '';
            document.getElementById('email').value = appointment.email || '';
            document.getElementById('serviceType').value = appointment.serviceType || '';
            document.getElementById('appointmentDate').value = appointment.appointmentDate || '';
            document.getElementById('appointmentTime').value = appointment.appointmentTime || '';
            document.getElementById('address').value = appointment.address || '';
            document.getElementById('notes').value = appointment.notes || '';
            document.getElementById('status').value = appointment.status || 'scheduled';
            
            document.getElementById('appointmentModal').style.display = 'block';
        }
        
        // Save appointment
        async function saveAppointment(event) {
            event.preventDefault();
            
            const formData = new FormData(event.target);
            const appointmentData = {
                customerName: formData.get('customerName'),
                phone: formData.get('phone'),
                email: formData.get('email'),
                serviceType: formData.get('serviceType'),
                appointmentDate: formData.get('appointmentDate'),
                appointmentTime: formData.get('appointmentTime'),
                address: formData.get('address'),
                notes: formData.get('notes'),
                status: formData.get('status'),
                updatedAt: new Date()
            };
            
            try {
                showLoading();
                if (currentEditId) {
                    await db.collection('appointments').doc(currentEditId).update(appointmentData);
                    showNotification('Appointment updated successfully', 'success');
                } else {
                    appointmentData.createdAt = new Date();
                    await db.collection('appointments').add(appointmentData);
                    showNotification('Appointment created successfully', 'success');
                }
                
                closeModal();
                loadAppointments();
                hideLoading();
            } catch (error) {
                console.error('Error saving appointment:', error);
                hideLoading();
                showNotification('Error saving appointment', 'error');
            }
        }
        
        // Complete appointment
        async function completeAppointment(id) {
            if (!confirm('Mark this appointment as completed?')) return;
            
            try {
                showLoading();
                await db.collection('appointments').doc(id).update({
                    status: 'completed',
                    completedAt: new Date()
                });
                showNotification('Appointment marked as completed', 'success');
                loadAppointments();
                hideLoading();
            } catch (error) {
                console.error('Error completing appointment:', error);
                hideLoading();
                showNotification('Error completing appointment', 'error');
            }
        }
        
        // Delete appointment
        async function deleteAppointment(id) {
            if (!confirm('Are you sure you want to delete this appointment?')) return;
            
            try {
                showLoading();
                await db.collection('appointments').doc(id).delete();
                showNotification('Appointment deleted successfully', 'success');
                loadAppointments();
                hideLoading();
            } catch (error) {
                console.error('Error deleting appointment:', error);
                hideLoading();
                showNotification('Error deleting appointment', 'error');
            }
        }
        
        // Export appointments
        function exportAppointments() {
            const csvContent = "data:text/csv;charset=utf-8," 
                + "Customer Name,Service Type,Date,Time,Status,Phone,Address\n"
                + appointments.map(a => 
                    `"${a.customerName || ''}","${a.serviceType || ''}","${a.appointmentDate || ''}","${a.appointmentTime || ''}","${a.status || ''}","${a.phone || ''}","${a.address || ''}"`
                ).join("\n");
            
            const encodedUri = encodeURI(csvContent);
            const link = document.createElement("a");
            link.setAttribute("href", encodedUri);
            link.setAttribute("download", "appointments.csv");
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
        
        // Utility functions
        function formatDate(date) {
            if (!date) return 'N/A';
            try {
                return new Date(date).toLocaleDateString();
            } catch (error) {
                return 'Invalid Date';
            }
        }
        
        function showLoading() {
            const loading = document.createElement('div');
            loading.id = 'loading';
            loading.innerHTML = '<div style="position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.5);display:flex;align-items:center;justify-content:center;z-index:9999;"><div style="background:white;padding:2rem;border-radius:8px;"><i class="fas fa-spinner fa-spin"></i> Loading...</div></div>';
            document.body.appendChild(loading);
        }
        
        function hideLoading() {
            const loading = document.getElementById('loading');
            if (loading) loading.remove();
        }
        
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed; top: 20px; right: 20px; 
                background: ${type === 'error' ? '#f44336' : type === 'success' ? '#4caf50' : '#2196f3'}; 
                color: white; padding: 1rem; border-radius: 8px; z-index: 10000;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            `;
            notification.textContent = message;
            document.body.appendChild(notification);
            setTimeout(() => notification.remove(), 3000);
        }
        
        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('appointmentModal');
            if (event.target === modal) {
                closeModal();
            }
        }
        
        // Load appointments when page loads
        document.addEventListener('DOMContentLoaded', loadAppointments);
        
        // Hamburger menu functionality
        function toggleMenu() {
            const hamburger = document.querySelector('.hamburger');
            const nav = document.querySelector('.admin-nav');
            
            hamburger.classList.toggle('active');
            nav.classList.toggle('active');
        }

        // Close menu when clicking outside
        document.addEventListener('click', function(event) {
            const hamburger = document.querySelector('.hamburger');
            const nav = document.querySelector('.admin-nav');
            
            if (!hamburger.contains(event.target) && !nav.contains(event.target)) {
                hamburger.classList.remove('active');
                nav.classList.remove('active');
            }
        });

        // Close menu on window resize
        window.addEventListener('resize', function() {
            if (window.innerWidth > 768) {
                const hamburger = document.querySelector('.hamburger');
                const nav = document.querySelector('.admin-nav');
                
                hamburger.classList.remove('active');
                nav.classList.remove('active');
            }
        });
    </script>

 
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const hamburger = document.querySelector('.hamburger');
            const nav = document.querySelector('#nav-menu');
            const navLinks = document.querySelector('.nav-links');
            const body = document.body;

            if (hamburger) {
                hamburger.addEventListener('click', function() {
                    const isExpanded = hamburger.getAttribute('aria-expanded') === 'true';
                    hamburger.classList.toggle('active');
                    nav.classList.toggle('active');
                    navLinks.classList.toggle('active');
                    body.classList.toggle('menu-open');
                    hamburger.setAttribute('aria-expanded', !isExpanded);
                    body.style.overflow = !isExpanded ? 'hidden' : '';
                });

                // Close menu when clicking outside
                document.addEventListener('click', function(event) {
                    const isClickInside = nav.contains(event.target) || hamburger.contains(event.target);
                    if (!isClickInside && nav.classList.contains('active')) {
                        hamburger.classList.remove('active');
                        nav.classList.remove('active');
                        navLinks.classList.remove('active');
                        body.classList.remove('menu-open');
                        body.style.overflow = '';
                        hamburger.setAttribute('aria-expanded', 'false');
                    }
                });

                // Close menu on escape key
                document.addEventListener('keydown', function(event) {
                    if (event.key === 'Escape' && nav.classList.contains('active')) {
                        hamburger.classList.remove('active');
                        nav.classList.remove('active');
                        navLinks.classList.remove('active');
                        body.classList.remove('menu-open');
                        body.style.overflow = '';
                        hamburger.setAttribute('aria-expanded', 'false');
                    }
                });

                // Close menu when clicking on links
                const navItems = navLinks.querySelectorAll('a');
                navItems.forEach(link => {
                    link.addEventListener('click', function() {
                        if (nav.classList.contains('active')) {
                            hamburger.classList.remove('active');
                            nav.classList.remove('active');
                            navLinks.classList.remove('active');
                            body.classList.remove('menu-open');
                            body.style.overflow = '';
                            hamburger.setAttribute('aria-expanded', 'false');
                        }
                    });
                });
            }
        });
    </script>
</body></html>