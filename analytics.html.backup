<!DOCTYPE html><html lang="en"><head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Analytics - Admin Dashboard</title>
    <meta name="description" content="Analytics and reporting for Holliday Lawn &amp; Garden">
    <link rel="stylesheet" href="assets/css/main.css">
    <link rel="stylesheet" href="assets/css/admin-dashboard.css">
    <link rel="stylesheet" href="assets/css/mobile-enhancements.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="icon" type="image/png" href="assets/icons/favicon-32x32.png" sizes="32x32">
    <link rel="icon" type="image/png" href="assets/icons/favicon-16x16.png" sizes="16x16">
    <link rel="apple-touch-icon" href="assets/icons/apple-touch-icon.png">
    <link rel="manifest" href="site.webmanifest">
    <meta name="theme-color" content="#2e7d32">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <style>
        /* Mobile Menu Styles */
        .hamburger {
            display: none;
            cursor: pointer;
            padding: 15px;
            z-index: 1000;
            position: relative;
            background: none;
            border: none;
            -webkit-tap-highlight-color: transparent;
            margin-right: 10px;
        }

        .hamburger span {
            display: block;
            width: 25px;
            height: 3px;
            background-color: #2e7d32;
            margin: 5px 0;
            transition: 0.3s;
        }

        .hamburger.active span:nth-child(1) {
            transform: rotate(-45deg) translate(-5px, 6px);
        }

        .hamburger.active span:nth-child(2) {
            opacity: 0;
        }

        .hamburger.active span:nth-child(3) {
            transform: rotate(45deg) translate(-5px, -6px);
        }

        @media (max-width: 768px) {
            .hamburger {
                display: block;
            }

            .nav-links {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100vh;
                background: rgba(255, 255, 255, 0.98);
                backdrop-filter: blur(8px);
                -webkit-backdrop-filter: blur(8px);
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                gap: 2.5rem;
                z-index: 1000;
                visibility: hidden;
                opacity: 0;
                transform: translateY(-100%);
                transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
                pointer-events: none;
                padding: 2rem;
            }

            .nav-links.active {
                visibility: visible;
                opacity: 1;
                transform: translateY(0);
                pointer-events: auto;
            }

            .nav-links a {
                font-size: 1.75rem;
                padding: 1rem 2rem;
                width: 100%;
                text-align: center;
                transition: all 0.3s ease;
                position: relative;
                color: #333333;
                font-weight: 600;
            }

            .nav-links a::after {
                content: '';
                position: absolute;
                bottom: 0;
                left: 50%;
                width: 0;
                height: 3px;
                background: #2e7d32;
                transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
                transform: translateX(-50%);
            }

            .nav-links a:hover::after,
            .nav-links a.active::after {
                width: 60%;
            }

            .nav-links a:hover {
                color: #2e7d32;
                transform: translateY(-2px);
            }

            body.menu-open {
                overflow: hidden;
                position: fixed;
                width: 100%;
                height: 100%;
            }
        }

        /* Prevent text selection during menu transitions */
        .nav-links {
            user-select: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
        }

        /* Ensure smooth scrolling on iOS */
        html {
            -webkit-overflow-scrolling: touch;
        }
    </style>
</head>
<body>
    
    <header class="main-header">
        <div class="logo">
            <a href="index.html">
                <img src="assets/images/hollidays-logo.optimized-320.png" alt="Holliday's Lawn &amp; Garden Logo">
            </a>
        </div>
        <button class="hamburger" aria-label="Toggle menu" aria-expanded="false" aria-controls="nav-menu">
            <span></span>
            <span></span>
            <span></span>
        </button>
        <nav id="nav-menu">
            <ul class="nav-links">
                <li><a href="index.html">Home</a></li>
                <li><a href="about.html">About</a></li>
                <li><a href="services.html">Services</a></li>
                <li><a href="education.html">Education</a></li>
                <li><a href="faq.html">FAQ</a></li>
                <li><a href="contact.html">Contact</a></li>
                <li><a href="pay-your-bill.html">Pay Your Bill</a></li>
                <li class="login-buttons">
                    <a href="login.html" class="btn-login btn-customer">
                        <i class="fas fa-user"></i>
                        Customer Login
                    </a>
                    <a href="admin-login.html" class="btn-login btn-admin">
                        <i class="fas fa-lock"></i>
                        Admin Login
                    </a>
                </li>
            </ul>
        </nav>
    </header>
    
    <header class="admin-header">
        <div class="logo">
            <img src="assets/images/hollidays-logo.optimized-1280.png" alt="Holliday's Lawn &amp; Garden Logo">
            <span style="font-size:1.3rem;font-weight:700;color:#2c5530;">Admin Dashboard</span>
        </div>
        <nav class="admin-nav">
            <a href="admin-dashboard.html">Dashboard</a>
            <a href="appointments.html">Appointments</a>
            <a href="customers.html">Customers</a>
            <a href="payments.html">Payments</a>
            <a href="analytics.html" class="active">Analytics</a>
        </nav>
        <div class="admin-actions">
            <button class="btn btn-secondary" onclick="location.reload()">
                <i class="fas fa-sync-alt"></i> Refresh
            </button>
            <button class="btn btn-danger" onclick="window.location.href='admin-login.html'">
                <i class="fas fa-sign-out-alt"></i> Logout
            </button>
        </div>
    </header>

    <main class="dashboard-main">
        <div class="page-header">
            <div>
                <h1 class="page-title">Analytics</h1>
                <p class="page-subtitle">Business insights and performance metrics</p>
            </div>
            <div class="page-actions">
                <button class="btn btn-secondary" onclick="exportReport()">
                    <i class="fas fa-download"></i> Export Report
                </button>
                <button class="btn btn-primary" onclick="generateReport()">
                    <i class="fas fa-chart-line"></i> Generate Report
                </button>
            </div>
        </div>

        <!-- Key Metrics -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number" id="totalRevenue">$0</div>
                <div class="stat-label">Total Revenue</div>
                <div class="stat-change" id="revenueChange">+0%</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="totalCustomers">0</div>
                <div class="stat-label">Total Customers</div>
                <div class="stat-change" id="customersChange">+0%</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="totalAppointments">0</div>
                <div class="stat-label">Total Appointments</div>
                <div class="stat-change" id="appointmentsChange">+0%</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="avgRating">0.0</div>
                <div class="stat-label">Average Rating</div>
                <div class="stat-change" id="ratingChange">+0%</div>
            </div>
        </div>

        <!-- Charts Section -->
        <div class="grid grid-2">
            <!-- Revenue Chart -->
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Revenue Trend</h3>
                    <select id="revenuePeriod" onchange="updateRevenueChart()">
                        <option value="7">Last 7 Days</option>
                        <option value="30" selected="">Last 30 Days</option>
                        <option value="90">Last 90 Days</option>
                        <option value="365">Last Year</option>
                    </select>
                </div>
                <div class="chart-container">
                    <canvas id="revenueChart"></canvas>
                </div>
            </div>

            <!-- Appointments Chart -->
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Appointments by Service</h3>
                    <select id="appointmentPeriod" onchange="updateAppointmentChart()">
                        <option value="30" selected="">Last 30 Days</option>
                        <option value="90">Last 90 Days</option>
                        <option value="365">Last Year</option>
                    </select>
                </div>
                <div class="chart-container">
                    <canvas id="appointmentChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Additional Analytics -->
        <div class="grid grid-2">
            <!-- Customer Growth -->
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Customer Growth</h3>
                </div>
                <div class="chart-container">
                    <canvas id="customerChart"></canvas>
                </div>
            </div>

            <!-- Payment Methods -->
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Payment Methods Distribution</h3>
                </div>
                <div class="chart-container">
                    <canvas id="paymentMethodChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Performance Metrics -->
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Performance Metrics</h3>
            </div>
            <div class="metrics-grid">
                <div class="metric-item">
                    <div class="metric-label">Customer Retention Rate</div>
                    <div class="metric-value" id="retentionRate">0%</div>
                </div>
                <div class="metric-item">
                    <div class="metric-label">Average Appointment Value</div>
                    <div class="metric-value" id="avgAppointmentValue">$0</div>
                </div>
                <div class="metric-item">
                    <div class="metric-label">Completion Rate</div>
                    <div class="metric-value" id="completionRate">0%</div>
                </div>
                <div class="metric-item">
                    <div class="metric-label">Response Time (Hours)</div>
                    <div class="metric-value" id="responseTime">0</div>
                </div>
            </div>
        </div>

        <!-- Top Performers -->
        <div class="grid grid-2">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Top Customers</h3>
                </div>
                <div class="table-wrapper">
                    <table id="topCustomersTable">
                        <thead>
                            <tr>
                                <th>Customer</th>
                                <th>Total Spent</th>
                                <th>Appointments</th>
                                <th>Last Visit</th>
                            </tr>
                        </thead>
                        <tbody id="topCustomersBody">
                            <tr>
                                <td colspan="4">
                                    <div class="empty-state">
                                        <i class="fas fa-users"></i>
                                        <h3>No Data Available</h3>
                                        <p>Customer data will appear here.</p>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Popular Services</h3>
                </div>
                <div class="table-wrapper">
                    <table id="popularServicesTable">
                        <thead>
                            <tr>
                                <th>Service</th>
                                <th>Bookings</th>
                                <th>Revenue</th>
                                <th>Avg Rating</th>
                            </tr>
                        </thead>
                        <tbody id="popularServicesBody">
                            <tr>
                                <td colspan="4">
                                    <div class="empty-state">
                                        <i class="fas fa-tools"></i>
                                        <h3>No Data Available</h3>
                                        <p>Service data will appear here.</p>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </main>

    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore-compat.js"></script>
    <script>
        // Firebase configuration
        const firebaseConfig = {
            apiKey: "AIzaSyACm0j7I8RX4ExIQRoejfk1HZMOQRGigBw",
            authDomain: "holiday-lawn-and-garden.firebaseapp.com",
            projectId: "holiday-lawn-and-garden",
            storageBucket: "holiday-lawn-and-garden.firebasestorage.app",
            messagingSenderId: "135322230444",
            appId: "1:135322230444:web:1a487b25a48aae07368909",
            measurementId: "G-KD6TBWR4ZT"
        };
        firebase.initializeApp(firebaseConfig);
        
        // Initialize Firestore
        const db = firebase.firestore();
        let analyticsData = {
            customers: [],
            appointments: [],
            payments: []
        };
        
        // Chart instances
        let revenueChart, appointmentChart, customerChart, paymentMethodChart;
        
        // Load analytics data
        async function loadAnalyticsData() {
            try {
                showLoading();
                
                // Load all data
                const [customersSnapshot, appointmentsSnapshot, paymentsSnapshot] = await Promise.all([
                    db.collection('customers').get(),
                    db.collection('appointments').get(),
                    db.collection('payments').get()
                ]);
                
                analyticsData.customers = customersSnapshot.docs.map(doc => ({
                    id: doc.id,
                    ...doc.data()
                }));
                
                analyticsData.appointments = appointmentsSnapshot.docs.map(doc => ({
                    id: doc.id,
                    ...doc.data()
                }));
                
                analyticsData.payments = paymentsSnapshot.docs.map(doc => ({
                    id: doc.id,
                    ...doc.data()
                }));
                
                updateMetrics();
                initializeCharts();
                updateTopPerformers();
                hideLoading();
            } catch (error) {
                console.error('Error loading analytics data:', error);
                hideLoading();
                showNotification('Error loading analytics data', 'error');
            }
        }
        
        // Update key metrics
        function updateMetrics() {
            const totalRevenue = analyticsData.payments
                .filter(p => p.status === 'completed')
                .reduce((sum, p) => sum + (p.amount || 0), 0);
            
            const totalCustomers = analyticsData.customers.length;
            const totalAppointments = analyticsData.appointments.length;
            const avgRating = 4.5; // Placeholder
            
            document.getElementById('totalRevenue').textContent = `$${totalRevenue.toFixed(2)}`;
            document.getElementById('totalCustomers').textContent = totalCustomers;
            document.getElementById('totalAppointments').textContent = totalAppointments;
            document.getElementById('avgRating').textContent = avgRating.toFixed(1);
            
            // Calculate changes (placeholder)
            document.getElementById('revenueChange').textContent = '+12.5%';
            document.getElementById('customersChange').textContent = '+8.3%';
            document.getElementById('appointmentsChange').textContent = '+15.2%';
            document.getElementById('ratingChange').textContent = '+2.1%';
            
            // Performance metrics
            document.getElementById('retentionRate').textContent = '85%';
            document.getElementById('avgAppointmentValue').textContent = `$${(totalRevenue / Math.max(totalAppointments, 1)).toFixed(2)}`;
            document.getElementById('completionRate').textContent = '92%';
            document.getElementById('responseTime').textContent = '2.5';
        }
        
        // Initialize charts
        function initializeCharts() {
            initializeRevenueChart();
            initializeAppointmentChart();
            initializeCustomerChart();
            initializePaymentMethodChart();
        }
        
        // Revenue chart
        function initializeRevenueChart() {
            const ctx = document.getElementById('revenueChart').getContext('2d');
            revenueChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: generateDateLabels(30),
                    datasets: [{
                        label: 'Revenue',
                        data: generateRevenueData(30),
                        borderColor: '#4caf50',
                        backgroundColor: 'rgba(76, 175, 80, 0.1)',
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return '$' + value.toLocaleString();
                                }
                            }
                        }
                    }
                }
            });
        }
        
        // Appointment chart
        function initializeAppointmentChart() {
            const ctx = document.getElementById('appointmentChart').getContext('2d');
            appointmentChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['Lawn Maintenance', 'Landscaping', 'Garden Care', 'Commercial Services', 'Pressure Washing'],
                    datasets: [{
                        data: [30, 25, 15, 20, 10],
                        backgroundColor: [
                            '#4caf50',
                            '#2196f3',
                            '#ff9800',
                            '#9c27b0',
                            '#f44336'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }
        
        // Customer growth chart
        function initializeCustomerChart() {
            const ctx = document.getElementById('customerChart').getContext('2d');
            customerChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: generateDateLabels(12),
                    datasets: [{
                        label: 'New Customers',
                        data: generateCustomerData(12),
                        backgroundColor: '#2196f3'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }
        
        // Payment method chart
        function initializePaymentMethodChart() {
            const ctx = document.getElementById('paymentMethodChart').getContext('2d');
            paymentMethodChart = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: ['Credit Card', 'Debit Card', 'Cash', 'Check', 'PayPal'],
                    datasets: [{
                        data: [45, 25, 15, 10, 5],
                        backgroundColor: [
                            '#4caf50',
                            '#2196f3',
                            '#ff9800',
                            '#9c27b0',
                            '#f44336'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }
        
        // Update top performers
        function updateTopPerformers() {
            // Top customers
            const topCustomers = analyticsData.customers
                .sort((a, b) => (b.totalSpent || 0) - (a.totalSpent || 0))
                .slice(0, 5);
            
            const topCustomersBody = document.getElementById('topCustomersBody');
            if (topCustomers.length === 0) {
                topCustomersBody.innerHTML = `
                    <tr>
                        <td colspan="4">
                            <div class="empty-state">
                                <i class="fas fa-users"></i>
                                <h3>No Data Available</h3>
                                <p>Customer data will appear here.</p>
                            </div>
                        </td>
                    </tr>
                `;
            } else {
                topCustomersBody.innerHTML = topCustomers.map(customer => `
                    <tr>
                        <td><strong>${customer.firstName || ''} ${customer.lastName || ''}</strong></td>
                        <td>$${(customer.totalSpent || 0).toFixed(2)}</td>
                        <td>${customer.appointmentCount || 0}</td>
                        <td>${formatDate(customer.lastVisit)}</td>
                    </tr>
                `).join('');
            }
            
            // Popular services
            const serviceStats = {};
            analyticsData.appointments.forEach(appointment => {
                const service = appointment.serviceType || 'Unknown';
                if (!serviceStats[service]) {
                    serviceStats[service] = { bookings: 0, revenue: 0, ratings: [] };
                }
                serviceStats[service].bookings++;
                serviceStats[service].revenue += appointment.cost || 0;
            });
            
            const popularServices = Object.entries(serviceStats)
                .map(([service, stats]) => ({
                    service,
                    bookings: stats.bookings,
                    revenue: stats.revenue,
                    avgRating: 4.5 // Placeholder
                }))
                .sort((a, b) => b.bookings - a.bookings)
                .slice(0, 5);
            
            const popularServicesBody = document.getElementById('popularServicesBody');
            if (popularServices.length === 0) {
                popularServicesBody.innerHTML = `
                    <tr>
                        <td colspan="4">
                            <div class="empty-state">
                                <i class="fas fa-tools"></i>
                                <h3>No Data Available</h3>
                                <p>Service data will appear here.</p>
                            </div>
                        </td>
                    </tr>
                `;
            } else {
                popularServicesBody.innerHTML = popularServices.map(service => `
                    <tr>
                        <td><strong>${service.service}</strong></td>
                        <td>${service.bookings}</td>
                        <td>$${service.revenue.toFixed(2)}</td>
                        <td>${service.avgRating.toFixed(1)}</td>
                    </tr>
                `).join('');
            }
        }
        
        // Utility functions
        function generateDateLabels(days) {
            const labels = [];
            for (let i = days - 1; i >= 0; i--) {
                const date = new Date();
                date.setDate(date.getDate() - i);
                labels.push(date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }));
            }
            return labels;
        }
        
        function generateRevenueData(days) {
            const data = [];
            for (let i = 0; i < days; i++) {
                data.push(Math.floor(Math.random() * 1000) + 200);
            }
            return data;
        }
        
        function generateCustomerData(months) {
            const data = [];
            for (let i = 0; i < months; i++) {
                data.push(Math.floor(Math.random() * 20) + 5);
            }
            return data;
        }
        
        function formatDate(date) {
            if (!date) return 'N/A';
            try {
                if (date.toDate) {
                    return date.toDate().toLocaleDateString();
                }
                return new Date(date).toLocaleDateString();
            } catch (error) {
                return 'Invalid Date';
            }
        }
        
        function updateRevenueChart() {
            const period = parseInt(document.getElementById('revenuePeriod').value);
            revenueChart.data.labels = generateDateLabels(period);
            revenueChart.data.datasets[0].data = generateRevenueData(period);
            revenueChart.update();
        }
        
        function updateAppointmentChart() {
            // Update appointment chart data based on period
            const period = parseInt(document.getElementById('appointmentPeriod').value);
            // This would filter real data based on the period
            appointmentChart.update();
        }
        
        function generateReport() {
            showNotification('Report generation started', 'info');
            // Implement report generation logic
            setTimeout(() => {
                showNotification('Report generated successfully', 'success');
            }, 2000);
        }
        
        function exportReport() {
            const reportData = {
                totalRevenue: document.getElementById('totalRevenue').textContent,
                totalCustomers: document.getElementById('totalCustomers').textContent,
                totalAppointments: document.getElementById('totalAppointments').textContent,
                generatedAt: new Date().toISOString()
            };
            
            const dataStr = JSON.stringify(reportData, null, 2);
            const dataBlob = new Blob([dataStr], {type: 'application/json'});
            const url = URL.createObjectURL(dataBlob);
            
            const link = document.createElement('a');
            link.href = url;
            link.download = `analytics-report-${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);
            
            showNotification('Report exported successfully', 'success');
        }
        
        function showLoading() {
            const loading = document.createElement('div');
            loading.id = 'loading';
            loading.innerHTML = '<div style="position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.5);display:flex;align-items:center;justify-content:center;z-index:9999;"><div style="background:white;padding:2rem;border-radius:8px;"><i class="fas fa-spinner fa-spin"></i> Loading...</div></div>';
            document.body.appendChild(loading);
        }
        
        function hideLoading() {
            const loading = document.getElementById('loading');
            if (loading) loading.remove();
        }
        
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed; top: 20px; right: 20px; 
                background: ${type === 'error' ? '#f44336' : type === 'success' ? '#4caf50' : '#2196f3'}; 
                color: white; padding: 1rem; border-radius: 8px; z-index: 10000;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            `;
            notification.textContent = message;
            document.body.appendChild(notification);
            setTimeout(() => notification.remove(), 3000);
        }
        
        // Load analytics when page loads
 
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const hamburger = document.querySelector('.hamburger');
            const nav = document.querySelector('#nav-menu');
            const navLinks = document.querySelector('.nav-links');
            const body = document.body;

            if (hamburger) {
                hamburger.addEventListener('click', function() {
                    const isExpanded = hamburger.getAttribute('aria-expanded') === 'true';
                    hamburger.classList.toggle('active');
                    nav.classList.toggle('active');
                    navLinks.classList.toggle('active');
                    body.classList.toggle('menu-open');
                    hamburger.setAttribute('aria-expanded', !isExpanded);
                });

                document.addEventListener('click', function(event) {
                    const isClickInside = nav.contains(event.target) || hamburger.contains(event.target);
                    if (!isClickInside && nav.classList.contains('active')) {
                        hamburger.classList.remove('active');
                        nav.classList.remove('active');
                        navLinks.classList.remove('active');
                        body.classList.remove('menu-open');
                        hamburger.setAttribute('aria-expanded', 'false');
                    }
                });

                document.addEventListener('keydown', function(event) {
                    if (event.key === 'Escape' && nav.classList.contains('active')) {
                        hamburger.classList.remove('active');
                        nav.classList.remove('active');
                        navLinks.classList.remove('active');
                        body.classList.remove('menu-open');
                        hamburger.setAttribute('aria-expanded', 'false');
                    }
                });

                const navItems = navLinks.querySelectorAll('a');
                navItems.forEach(link => {
                    link.addEventListener('click', function() {
                        if (nav.classList.contains('active')) {
                            hamburger.classList.remove('active');
                            nav.classList.remove('active');
                            navLinks.classList.remove('active');
                            body.classList.remove('menu-open');
                            hamburger.setAttribute('aria-expanded', 'false');
                        }
                    });
                });
            }
        });
    </script>
           document.addEventListener('DOMContentLoaded', loadAnalyticsData);
    
    
    <style>
        .chart-container {
            position: relative;
            height: 300px;
            margin: 1rem 0;
        }
        
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin-top: 1rem;
        }
        
        .metric-item {
            text-align: center;
            padding: 1.5rem;
            background: #f8f9fa;
            border-radius: 8px;
        }
        
        .metric-label {
            font-size: 0.9rem;
            color: #666;
            margin-bottom: 0.5rem;
        }
        
        .metric-value {
            font-size: 1.5rem;
            font-weight: 700;
            color: #4caf50;
        }
        
        .stat-change {
            font-size: 0.8rem;
            color: #4caf50;
            margin-top: 0.5rem;
        }
        
        .page-actions {
            display: flex;
            gap: 1rem;
        }
        
        @media (max-width: 768px) {
            .page-actions {
                flex-direction: column;
            }
            
            .chart-container {
                height: 250px;
            }
            
            .metrics-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>


</body></html>