<!DOCTYPE html><html lang="en"><head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Appointment - Holliday's Lawn &amp; Garden</title>
    <link rel="stylesheet" href="assets/css/main.css">
    <link rel="stylesheet" href="assets/css/admin-dashboard.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        .appointment-container {
            max-width: 1400px;
            margin: 2rem auto;
            padding: 2rem;
        }
        .appointment-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }
        .appointment-title {
            font-size: 2rem;
            font-weight: 700;
            color: #2c5530;
        }
        .appointment-form-container, .appointment-list-container {
            background: white;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }
        
        /* Form styles */
        .form-group {
            margin-bottom: 1.5rem;
        }
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #333;
        }
        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }
        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #4caf50;
            box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);
        }
        .form-actions {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
            margin-top: 2rem;
        }
        .btn-save {
            background: #4caf50;
            color: white;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
        }
        .btn-save:hover {
            background: #45a049;
        }
        
        /* Table styles */
        .appointment-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        .appointment-table th,
        .appointment-table td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid #eee;
        }
        .appointment-table th {
            background-color: #f8f9fa;
            font-weight: 600;
            color: #2c5530;
        }
        .appointment-table tr:hover {
            background-color: #f8f9fa;
        }
        .btn-edit, .btn-delete {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-right: 0.5rem;
            font-size: 0.9rem;
        }
        .btn-edit {
            background: #2196F3;
            color: white;
        }
        .btn-edit:hover {
            background: #1976D2;
        }
        .btn-delete {
            background: #f44336;
            color: white;
        }
        .btn-delete:hover {
            background: #d32f2f;
        }
        
        /* Mobile responsive styles */
        @media (max-width: 768px) {
            .appointment-container {
                padding: 1rem;
                margin: 1rem auto;
            }
            
            .appointment-header {
                flex-direction: column;
                gap: 1rem;
                text-align: center;
            }
            
            .appointment-title {
                font-size: 1.8rem;
            }
            
            .appointment-form-container, 
            .appointment-list-container {
                padding: 1.5rem;
                margin-bottom: 1.5rem;
            }
            
            .form-actions {
                flex-direction: column;
                gap: 0.75rem;
            }
            
            .btn-save {
                width: 100%;
                padding: 1rem;
            }
            
            /* Mobile table styles */
            .appointment-table {
                display: block;
                overflow-x: auto;
                white-space: nowrap;
                font-size: 0.9rem;
            }
            
            .appointment-table th,
            .appointment-table td {
                padding: 0.75rem 0.5rem;
                min-width: 120px;
            }
            
            .appointment-table th:first-child,
            .appointment-table td:first-child {
                min-width: 140px;
            }
            
            .appointment-table th:last-child,
            .appointment-table td:last-child {
                min-width: 100px;
            }
            
            .btn-edit, .btn-delete {
                padding: 0.4rem 0.8rem;
                font-size: 0.8rem;
                margin-right: 0.25rem;
            }
        }
        
        @media (max-width: 480px) {
            .appointment-container {
                padding: 0.5rem;
            }
            
            .appointment-form-container, 
            .appointment-list-container {
                padding: 1rem;
            }
            
            .appointment-title {
                font-size: 1.6rem;
            }
            
            .form-group input,
            .form-group select,
            .form-group textarea {
                padding: 0.6rem;
                font-size: 0.9rem;
            }
            
            /* Enhanced mobile table */
            .appointment-table {
                font-size: 0.8rem;
            }
            
            .appointment-table th,
            .appointment-table td {
                padding: 0.5rem 0.25rem;
                min-width: 100px;
            }
            
            .appointment-table th:first-child,
            .appointment-table td:first-child {
                min-width: 120px;
            }
            
            .btn-edit, .btn-delete {
                padding: 0.3rem 0.6rem;
                font-size: 0.75rem;
                margin-right: 0.2rem;
            }
        }
        
        /* Card-based mobile layout for very small screens */
        @media (max-width: 360px) {
            .appointment-table {
                display: none;
            }
            
            .appointment-table.mobile-cards {
                display: block;
            }
            
            .appointment-card {
                background: white;
                border: 1px solid #eee;
                border-radius: 8px;
                padding: 1rem;
                margin-bottom: 1rem;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }
            
            .appointment-card-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 0.5rem;
                padding-bottom: 0.5rem;
                border-bottom: 1px solid #eee;
            }
            
            .appointment-card-title {
                font-weight: 600;
                color: #2c5530;
                font-size: 1rem;
            }
            
            .appointment-card-content {
                display: grid;
                gap: 0.5rem;
                font-size: 0.9rem;
            }
            
            .appointment-card-row {
                display: flex;
                justify-content: space-between;
                align-items: flex-start;
                flex-wrap: wrap;
            }
            
            .appointment-card-label {
                font-weight: 600;
                color: #666;
                min-width: 80px;
            }
            
            .appointment-card-actions {
                display: flex;
                gap: 0.5rem;
                margin-top: 1rem;
                justify-content: flex-end;
            }
            
            .appointment-card-actions .btn-edit,
            .appointment-card-actions .btn-delete {
                min-height: 44px; /* Better touch target */
                padding: 0.75rem 1rem;
                font-size: 0.9rem;
            }
        }
        
        /* Additional mobile enhancements */
        @media (max-width: 768px) {
            /* Improve touch targets */
            .btn-edit, .btn-delete {
                min-height: 44px;
                min-width: 44px;
            }
            
            /* Better spacing for mobile forms */
            .form-group {
                margin-bottom: 1.25rem;
            }
            
            /* Improve mobile navigation */
            .admin-nav {
                flex-wrap: wrap;
                gap: 0.5rem;
            }
            
            .admin-nav a {
                padding: 0.75rem 1rem;
                font-size: 0.9rem;
            }
        }
        
        /* Landscape mobile optimization */
        @media (max-width: 768px) and (orientation: landscape) {
            .appointment-container {
                padding: 0.75rem;
            }
            
            .appointment-form-container, 
            .appointment-list-container {
                padding: 1rem;
            }
            
            .appointment-table th,
            .appointment-table td {
                padding: 0.5rem 0.25rem;
                font-size: 0.8rem;
            }
        }
    </style>

    <style>
        /* Mobile Menu Styles */
        .hamburger {
            display: none;
            cursor: pointer;
            padding: 15px;
            z-index: 1000;
            position: relative;
            background: none;
            border: none;
            -webkit-tap-highlight-color: transparent;
            margin-right: 10px;
        }

        .hamburger span {
            display: block;
            width: 25px;
            height: 3px;
            background-color: #2e7d32;
            margin: 5px 0;
            transition: 0.3s;
        }

        .hamburger.active span:nth-child(1) {
            transform: rotate(-45deg) translate(-5px, 6px);
        }

        .hamburger.active span:nth-child(2) {
            opacity: 0;
        }

        .hamburger.active span:nth-child(3) {
            transform: rotate(45deg) translate(-5px, -6px);
        }

        @media (max-width: 768px) {
            .hamburger {
                display: block;
            }

            .nav-links {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100vh;
                background: rgba(255, 255, 255, 0.98);
                backdrop-filter: blur(8px);
                -webkit-backdrop-filter: blur(8px);
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                gap: 2.5rem;
                z-index: 1000;
                visibility: hidden;
                opacity: 0;
                transform: translateY(-100%);
                transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
                pointer-events: none;
                padding: 2rem;
            }

            .nav-links.active {
                visibility: visible;
                opacity: 1;
                transform: translateY(0);
                pointer-events: auto;
            }

            .nav-links a {
                font-size: 1.75rem;
                padding: 1rem 2rem;
                width: 100%;
                text-align: center;
                transition: all 0.3s ease;
                position: relative;
                color: #333333;
                font-weight: 600;
            }

            .nav-links a::after {
                content: '';
                position: absolute;
                bottom: 0;
                left: 50%;
                width: 0;
                height: 3px;
                background: #2e7d32;
                transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
                transform: translateX(-50%);
            }

            .nav-links a:hover::after,
            .nav-links a.active::after {
                width: 60%;
            }

            .nav-links a:hover {
                color: #2e7d32;
                transform: translateY(-2px);
            }

            body.menu-open {
                overflow: hidden;
                position: fixed;
                width: 100%;
                height: 100%;
            }
        }

        /* Prevent text selection during menu transitions */
        .nav-links {
            user-select: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
        }

        /* Ensure smooth scrolling on iOS */
        html {
            -webkit-overflow-scrolling: touch;
        }
    </style>
</head>
<body>
    <header class="admin-header">
        <div class="logo">
            <img src="assets/images/hollidays-logo.optimized-320.png" alt="Logo">
        </div>
        <nav class="admin-nav">
            <a href="admin-dashboard.html">Dashboard</a>
            <a href="staff.html">Staff</a>
            <a href="add-appointment.html">Appointments</a>
            <a href="customers.html">Customers</a>
        </nav>
    
    <button class="hamburger" aria-label="Toggle menu" aria-expanded="false" aria-controls="nav-menu">
        <span></span>
        <span></span>
        <span></span>
    </button>
    <nav id="nav-menu">
        <ul class="nav-links">
            <li><a href="index.html">Home</a></li>
            <li><a href="about.html">About</a></li>
            <li><a href="services.html">Services</a></li>
            <li><a href="education.html">Education</a></li>
            <li><a href="faq.html">FAQ</a></li>
            <li><a href="contact.html">Contact</a></li>
            <li><a href="pay-your-bill.html">Pay Your Bill</a></li>
            <li class="login-buttons">
                <a href="login.html" class="btn-login btn-customer">
                    <i class="fas fa-user"></i>
                    Customer Login
                </a>
                <a href="admin-login.html" class="btn-login btn-admin">
                    <i class="fas fa-lock"></i>
                    Admin Login
                </a>
            </li>
        </ul>
    </nav>
</header>

    <!-- Mobile Admin Header -->
    <div class="mobile-admin-header">
        <div class="header-content">
            <h1 class="page-title">Appointments</h1>
            <a href="admin-dashboard.html" class="dashboard-link">
                <i class="fas fa-tachometer-alt"></i>
                Dashboard
            </a>
        </div>
    </div>

    <!-- Back to Dashboard Button (Mobile) -->
    <button class="back-to-dashboard" onclick="window.location.href='admin-dashboard.html'" title="Back to Dashboard">
        <i class="fas fa-arrow-left"></i>
    </button>

    <div class="appointment-container admin-page-content">
        <div class="appointment-header">
            <h1 class="appointment-title">Manage Appointments</h1>
        </div>

        <div class="appointment-form-container">
            <h2>Add New Appointment</h2>
            <form id="appointmentForm">
                <div class="form-group">
                    <label for="customer">Customer</label>
                    <select id="customer" required=""></select>
                </div>
                <div class="form-group">
                    <label for="service">Service</label>
                    <select id="service" required="">
                        <option value="">Select Service</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="appointmentDate">Date</label>
                    <input type="date" id="appointmentDate" required="">
                </div>
                <div class="form-group">
                    <label for="appointmentTime">Time</label>
                    <input type="time" id="appointmentTime" required="">
                </div>
                <div class="form-group">
                    <label for="assignedTo">Assign to Staff</label>
                    <select id="assignedTo" required=""></select>
                </div>
                <div class="form-group">
                    <label for="notes">Notes</label>
                    <textarea id="notes" rows="4"></textarea>
                </div>
                <div class="form-actions">
                    <button type="submit" class="btn-save">Add Appointment</button>
                </div>
            </form>
        </div>

        <div class="appointment-list-container">
            <h2>Upcoming Appointments</h2>
            <div id="appointmentList">
                <p>No upcoming appointments.</p>
            </div>
        </div>
    </div>
    
    <!-- Mobile Admin Navigation -->
    <nav class="mobile-admin-nav">
        <div class="nav-buttons">
            <a href="admin-dashboard.html" class="nav-btn">
                <i class="fas fa-tachometer-alt"></i>
                <span>Dashboard</span>
            </a>
            <a href="staff.html" class="nav-btn">
                <i class="fas fa-users"></i>
                <span>Staff</span>
            </a>
            <a href="add-appointment.html" class="nav-btn active">
                <i class="fas fa-calendar-plus"></i>
                <span>Appointments</span>
            </a>
            <a href="customers.html" class="nav-btn">
                <i class="fas fa-user-friends"></i>
                <span>Customers</span>
            </a>
            <a href="inventory.html" class="nav-btn">
                <i class="fas fa-boxes"></i>
                <span>Inventory</span>
            </a>
        </div>
    </nav>
    
    <script type="module">
        import { initializeApp } from 'https://www.gstatic.com/firebasejs/9.6.1/firebase-app.js';
        import { getFirestore, collection, getDocs, addDoc, doc, updateDoc, deleteDoc, getDoc, query, where, orderBy, serverTimestamp } from 'https://www.gstatic.com/firebasejs/9.6.1/firebase-firestore.js';
        import { getAllServices } from './assets/js/service-cache.js';

        // Firebase configuration
        const firebaseConfig = {
            apiKey: "AIzaSyACm0j7I8RX4ExIQRoejfk1HZMOQRGigBw",
            authDomain: "holiday-lawn-and-garden.firebaseapp.com",
            projectId: "holiday-lawn-and-garden",
            storageBucket: "holiday-lawn-and-garden.firebasestorage.app",
            messagingSenderId: "135322230444",
            appId: "1:135322230444:web:1a487b25a48aae07368909",
            measurementId: "G-KD6TBWR4ZT"
        };

        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);

        document.addEventListener('DOMContentLoaded', () => {
            async function fetchCustomers() {
                const customerSelect = document.getElementById('customer');
                customerSelect.innerHTML = '<option value="">Loading...</option>';
                try {
                    const snapshot = await getDocs(collection(db, 'customers'));
                    let options = '<option value="">Select Customer</option>';
                    snapshot.forEach(doc => {
                        const customer = doc.data();
                        options += `<option value="${doc.id}">${customer.firstName} ${customer.lastName}</option>`;
                    });
                    customerSelect.innerHTML = options;
                } catch (error) {
                    console.error("Error fetching customers:", error);
                    customerSelect.innerHTML = '<option value="">Could not load customers</option>';
                }
            }

            async function fetchStaff() {
                const staffSelect = document.getElementById('assignedTo');
                staffSelect.innerHTML = '<option value="">Loading...</option>';
                try {
                    const q = query(collection(db, 'staff'), where('status', '==', 'active'));
                    const snapshot = await getDocs(q);
                    let options = '<option value="">Select Staff</option>';
                    snapshot.forEach(doc => {
                        const staff = doc.data();
                        options += `<option value="${doc.id}">${staff.firstName} ${staff.lastName}</option>`;
                    });
                    staffSelect.innerHTML = options;
                } catch (error) {
                    console.error("Error fetching staff:", error);
                    staffSelect.innerHTML = '<option value="">Could not load staff</option>';
                }
            }

            async function fetchServices() {
                const serviceSelect = document.getElementById('service');
                serviceSelect.innerHTML = '<option value="">Loading...</option>';
                try {
                    const services = getAllServices();
                    let options = '<option value="">Select Service</option>';
                    Object.values(services).forEach(service => {
                        options += `<option value="${service.title}">${service.icon} ${service.title}</option>`;
                    });
                    serviceSelect.innerHTML = options;
                } catch (error) {
                    console.error("Error fetching services:", error);
                    serviceSelect.innerHTML = '<option value="">Could not load services</option>';
                }
            }

            async function fetchAppointments() {
                const appointmentList = document.getElementById('appointmentList');
                appointmentList.innerHTML = '<p>Loading...</p>';
                try {
                    const q = query(collection(db, 'appointments'), orderBy('date'));
                    const snapshot = await getDocs(q);
                    if (snapshot.empty) {
                        appointmentList.innerHTML = '<p>No upcoming appointments.</p>';
                        return;
                    }
                    
                    // Check if we're on a very small screen for card layout
                    const isSmallScreen = window.innerWidth <= 360;
                    
                    if (isSmallScreen) {
                        // Card-based layout for very small screens
                        let cardsHtml = '';
                        const staffCache = {};
                        const customerCache = {};

                        // Pre-fetch all staff and customers
                        const staffPromise = getDocs(collection(db, 'staff'));
                        const customerPromise = getDocs(collection(db, 'customers'));
                        const [staffSnapshot, customerSnapshot] = await Promise.all([staffPromise, customerPromise]);
                        staffSnapshot.forEach(doc => staffCache[doc.id] = doc.data());
                        customerSnapshot.forEach(doc => customerCache[doc.id] = doc.data());

                        snapshot.forEach(doc => {
                            const appointment = doc.data();
                            const customer = customerCache[appointment.customerId];
                            const staff = staffCache[appointment.assignedTo];
                            const date = appointment.date?.toDate ? appointment.date.toDate() : new Date(appointment.date);
                            
                            cardsHtml += `
                                <div class="appointment-card">
                                    <div class="appointment-card-header">
                                        <div class="appointment-card-title">${customer ? `${customer.firstName} ${customer.lastName}` : 'N/A'}</div>
                                    </div>
                                    <div class="appointment-card-content">
                                        <div class="appointment-card-row">
                                            <span class="appointment-card-label">Service:</span>
                                            <span>${appointment.service}</span>
                                        </div>
                                        <div class="appointment-card-row">
                                            <span class="appointment-card-label">Date:</span>
                                            <span>${date.toLocaleDateString()}</span>
                                        </div>
                                        <div class="appointment-card-row">
                                            <span class="appointment-card-label">Time:</span>
                                            <span>${date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</span>
                                        </div>
                                        <div class="appointment-card-row">
                                            <span class="appointment-card-label">Assigned To:</span>
                                            <span>${staff ? `${staff.firstName} ${staff.lastName}` : 'N/A'}</span>
                                        </div>
                                        ${appointment.notes ? `
                                        <div class="appointment-card-row">
                                            <span class="appointment-card-label">Notes:</span>
                                            <span>${appointment.notes}</span>
                                        </div>
                                        ` : ''}
                                    </div>
                                    <div class="appointment-card-actions">
                                        <button class="btn-edit" data-id="${doc.id}">Edit</button>
                                        <button class="btn-delete" data-id="${doc.id}">Delete</button>
                                    </div>
                                </div>
                            `;
                        });
                        appointmentList.innerHTML = cardsHtml;
                    } else {
                        // Table layout for larger screens
                        let html = '<table class="appointment-table"><thead><tr><th>Customer</th><th>Service</th><th>Date</th><th>Time</th><th>Assigned To</th><th>Actions</th></tr></thead><tbody>';
                        const staffCache = {};
                        const customerCache = {};

                        // Pre-fetch all staff and customers
                        const staffPromise = getDocs(collection(db, 'staff'));
                        const customerPromise = getDocs(collection(db, 'customers'));
                        const [staffSnapshot, customerSnapshot] = await Promise.all([staffPromise, customerPromise]);
                        staffSnapshot.forEach(doc => staffCache[doc.id] = doc.data());
                        customerSnapshot.forEach(doc => customerCache[doc.id] = doc.data());

                        snapshot.forEach(doc => {
                            const appointment = doc.data();
                            const customer = customerCache[appointment.customerId];
                            const staff = staffCache[appointment.assignedTo];
                            const date = appointment.date?.toDate ? appointment.date.toDate() : new Date(appointment.date);
                            html += `
                                <tr>
                                    <td>${customer ? `${customer.firstName} ${customer.lastName}` : 'N/A'}</td>
                                    <td>${appointment.service}</td>
                                    <td>${date.toLocaleDateString()}</td>
                                    <td>${date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</td>
                                    <td>${staff ? `${staff.firstName} ${staff.lastName}` : 'N/A'}</td>
                                    <td>
                                        <button class="bt