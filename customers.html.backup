<!DOCTYPE html><html lang="en"><head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Customers - Admin Dashboard</title>
    <meta name="description" content="Manage customers for Holliday Lawn &amp; Garden">
    <link rel="stylesheet" href="assets/css/main.css">
    <link rel="stylesheet" href="assets/css/admin-dashboard.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="icon" type="image/png" href="assets/icons/favicon-32x32.png" sizes="32x32">
    <link rel="icon" type="image/png" href="assets/icons/favicon-16x16.png" sizes="16x16">
    <link rel="apple-touch-icon" href="assets/icons/apple-touch-icon.png">
    <link rel="manifest" href="site.webmanifest">
    <meta name="theme-color" content="#2e7d32">

    <style>
        /* Mobile responsive styles */
        @media (max-width: 768px) {
            .main-header .nav-links {
                display: none;
            }
            
            .main-header .hamburger {
                display: block;
            }
            
            .main-header.nav-active .nav-links {
                display: flex;
                flex-direction: column;
                position: absolute;
                top: 100%;
                left: 0;
                right: 0;
                background: white;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                z-index: 1000;
            }
            
            .main-header .nav-links li {
                border-bottom: 1px solid #eee;
            }
            
            .main-header .nav-links a {
                padding: 1rem;
                display: block;
            }
        }
        
        @media (max-width: 480px) {
            .main-header {
                padding: 0.5rem 1rem;
            }
            
            .main-header .logo img {
                max-height: 40px;
            }
        }
    </style>
</head>
<body>
    
    <header class="main-header">
        <div class="logo">
            <a href="index.html">
                <img src="assets/images/hollidays-logo.optimized-320.png" alt="Holliday's Lawn &amp; Garden Logo">
            </a>
        </div>
        <button class="hamburger" aria-label="Toggle menu" aria-expanded="false" aria-controls="nav-menu">
            <span></span>
            <span></span>
            <span></span>
        </button>
        <nav id="nav-menu">
            <ul class="nav-links">
                <li><a href="index.html">Home</a></li>
                <li><a href="about.html">About</a></li>
                <li><a href="services.html">Services</a></li>
                <li><a href="education.html">Education</a></li>
                <li><a href="faq.html">FAQ</a></li>
                <li><a href="contact.html">Contact</a></li>
                <li><a href="pay-your-bill.html">Pay Your Bill</a></li>
                <li class="login-buttons">
                    <a href="login.html" class="btn-login btn-customer">
                        <i class="fas fa-user"></i>
                        Customer Login
                    </a>
                    <a href="admin-login.html" class="btn-login btn-admin">
                        <i class="fas fa-lock"></i>
                        Admin Login
                    </a>
                </li>
            </ul>
        </nav>
    </header>
    
    <header class="admin-header">
        <div class="logo">
            <img src="assets/images/hollidays-logo.optimized-320.png" alt="Logo">
        </div>
        <nav class="admin-nav">
            <a href="admin-dashboard.html">Dashboard</a>
            <a href="staff.html">Staff</a>
            <a href="add-appointment.html">Appointments</a>
            <a href="customers.html">Customers</a>
        </nav>
    </header>

    <!-- Mobile Admin Header -->
    <div class="mobile-admin-header">
        <div class="header-content">
            <h1 class="page-title">Customers</h1>
            <a href="admin-dashboard.html" class="dashboard-link">
                <i class="fas fa-tachometer-alt"></i>
                Dashboard
            </a>
        </div>
    </div>

    <!-- Back to Dashboard Button (Mobile) -->
    <button class="back-to-dashboard" onclick="window.location.href='admin-dashboard.html'" title="Back to Dashboard">
        <i class="fas fa-arrow-left"></i>
    </button>

    <div class="customer-container admin-page-content">
        <div class="page-header">
            <div>
                <h1 class="page-title">Customers</h1>
                <p class="page-subtitle">Manage and view all customer information</p>
            </div>
            <button class="btn btn-primary" onclick="openAddModal()">
                <i class="fas fa-plus"></i> Add Customer
            </button>
        </div>

        <!-- Stats Cards -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number" id="totalCustomers">0</div>
                <div class="stat-label">Total Customers</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="activeCustomers">0</div>
                <div class="stat-label">Active Customers</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="newCustomers">0</div>
                <div class="stat-label">New This Month</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="totalRevenue">$0</div>
                <div class="stat-label">Total Revenue</div>
            </div>
        </div>

        <div class="filters-section">
            <div class="filters-row">
                <div class="filter-group">
                    <label>Status</label>
                    <select id="statusFilter" onchange="filterCustomers()">
                        <option value="">All Statuses</option>
                        <option value="active">Active</option>
                        <option value="inactive">Inactive</option>
                        <option value="pending">Pending</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label>Search</label>
                    <input type="text" id="searchFilter" placeholder="Search by name, email, or phone" onkeyup="filterCustomers()">
                </div>
                <div class="filter-group">
                    <label>Sort By</label>
                    <select id="sortFilter" onchange="filterCustomers()">
                        <option value="name">Name</option>
                        <option value="date">Join Date</option>
                        <option value="revenue">Revenue</option>
                        <option value="appointments">Appointments</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label>&nbsp;</label>
                    <button class="btn btn-secondary" onclick="clearFilters()">
                        <i class="fas fa-times"></i> Clear Filters
                    </button>
                </div>
            </div>
        </div>

        <div class="table-container">
            <div class="table-header">
                <h3 class="table-title">All Customers</h3>
                <div class="table-actions">
                    <button class="btn btn-secondary" onclick="exportCustomers()">
                        <i class="fas fa-download"></i> Export
                    </button>
                </div>
            </div>
            <div class="table-wrapper">
                <table id="customersTable">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Phone</th>
                            <th>Address</th>
                            <th>Status</th>
                            <th>Join Date</th>
                            <th>Total Spent</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="customersTableBody">
                        <tr>
                            <td colspan="8">
                                <div class="empty-state">
                                    <i class="fas fa-users"></i>
                                    <h3>No Customers Found</h3>
                                    <p>There are no customers matching your criteria.</p>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Add/Edit Customer Modal -->
    <div id="customerModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title" id="modalTitle">Add New Customer</h2>
                <span class="close" onclick="closeModal()">Ã—</span>
            </div>
            <form id="customerForm" onsubmit="saveCustomer(event)">
                <div class="form-row">
                    <div class="form-group">
                        <label for="firstName">First Name *</label>
                        <input type="text" id="firstName" name="firstName" required="">
                    </div>
                    <div class="form-group">
                        <label for="lastName">Last Name *</label>
                        <input type="text" id="lastName" name="lastName" required="">
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="email">Email *</label>
                        <input type="email" id="email" name="email" required="">
                    </div>
                    <div class="form-group">
                        <label for="phone">Phone *</label>
                        <input type="tel" id="phone" name="phone" required="">
                    </div>
                </div>
                <div class="form-group">
                    <label for="address">Address *</label>
                    <textarea id="address" name="address" required=""></textarea>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="city">City</label>
                        <input type="text" id="city" name="city">
                    </div>
                    <div class="form-group">
                        <label for="state">State</label>
                        <input type="text" id="state" name="state">
                    </div>
                </div>
                <div class="form-group">
                    <label for="zipCode">ZIP Code</label>
                    <input type="text" id="zipCode" name="zipCode">
                </div>
                <div class="form-group">
                    <label for="notes">Notes</label>
                    <textarea id="notes" name="notes"></textarea>
                </div>
                <div class="form-group">
                    <label for="status">Status</label>
                    <select id="status" name="status">
                        <option value="active">Active</option>
                        <option value="inactive">Inactive</option>
                        <option value="pending">Pending</option>
                    </select>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i> Save Customer
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore-compat.js"></script>
    <script>
        // Firebase configuration
        const firebaseConfig = {
            apiKey: "AIzaSyACm0j7I8RX4ExIQRoejfk1HZMOQRGigBw",
            authDomain: "holiday-lawn-and-garden.firebaseapp.com",
            projectId: "holiday-lawn-and-garden",
            storageBucket: "holiday-lawn-and-garden.firebasestorage.app",
            messagingSenderId: "135322230444",
            appId: "1:135322230444:web:1a487b25a48aae07368909",
            measurementId: "G-KD6TBWR4ZT"
        };
        firebase.initializeApp(firebaseConfig);
        
        // Initialize Firestore
        const db = firebase.firestore();
        let customers = [];
        let currentEditId = null;
        
        // Load customers
        async function loadCustomers() {
            try {
                showLoading();
                const customersSnapshot = await db.collection('customers').orderBy('createdAt', 'desc').get();
                customers = customersSnapshot.docs.map(doc => ({
                    id: doc.id,
                    ...doc.data()
                }));
                displayCustomers(customers);
                updateStats();
                hideLoading();
            } catch (error) {
                console.error('Error loading customers:', error);
                hideLoading();
                showNotification('Error loading customers', 'error');
            }
        }
        
        // Display customers in table
        function displayCustomers(customersToShow) {
            const tbody = document.getElementById('customersTableBody');
            
            if (customersToShow.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="8">
                            <div class="empty-state">
                                <i class="fas fa-users"></i>
                                <h3>No Customers Found</h3>
                                <p>There are no customers matching your criteria.</p>
                            </div>
                        </td>
                    </tr>
                `;
                return;
            }
            
            tbody.innerHTML = customersToShow.map(customer => `
                <tr>
                    <td><strong>${customer.firstName || ''} ${customer.lastName || ''}</strong></td>
                    <td>${customer.email || 'N/A'}</td>
                    <td>${customer.phone || 'N/A'}</td>
                    <td>${customer.address || 'N/A'}</td>
                    <td><span class="status-badge status-${customer.status || 'active'}">${customer.status || 'active'}</span></td>
                    <td>${formatDate(customer.createdAt)}</td>
                    <td>$${(customer.totalSpent || 0).toFixed(2)}</td>
                    <td>
                        <div class="action-buttons">
                            <button class="btn-small btn-secondary" onclick="editCustomer('${customer.id}')">
                                <i class="fas fa-edit"></i> Edit
                            </button>
                            <button class="btn-small btn-primary" onclick="viewCustomerDetails('${customer.id}')">
                                <i class="fas fa-eye"></i> View
                            </button>
                            <button class="btn-small btn-danger" onclick="deleteCustomer('${customer.id}')">
                                <i class="fas fa-trash"></i> Delete
                            </button>
                        </div>
                    </td>
                </tr>
            `).join('');
        }
        
        // Update statistics
        function updateStats() {
            const totalCustomers = customers.length;
            const activeCustomers = customers.filter(c => c.status === 'active').length;
            const newCustomers = customers.filter(c => {
                const joinDate = new Date(c.createdAt);
                const now = new Date();
                return joinDate.getMonth() === now.getMonth() && joinDate.getFullYear() === now.getFullYear();
            }).length;
            const totalRevenue = customers.reduce((sum, c) => sum + (c.totalSpent || 0), 0);
            
            document.getElementById('totalCustomers').textContent = totalCustomers;
            document.getElementById('activeCustomers').textContent = activeCustomers;
            document.getElementById('newCustomers').textContent = newCustomers;
            document.getElementById('totalRevenue').textContent = `$${totalRevenue.toFixed(2)}`;
        }
        
        // Filter customers
        function filterCustomers() {
            const statusFilter = document.getElementById('statusFilter').value;
            const searchFilter = document.getElementById('searchFilter').value.toLowerCase();
            const sortFilter = document.getElementById('sortFilter').value;
            
            let filtered = customers.filter(customer => {
                if (statusFilter && customer.status !== statusFilter) return false;
                if (searchFilter) {
                    const searchText = `${customer.firstName || ''} ${customer.lastName || ''} ${customer.email || ''} ${customer.phone || ''}`.toLowerCase();
                    if (!searchText.includes(searchFilter)) return false;
                }
                return true;
            });
            
            // Sort customers
            filtered.sort((a, b) => {
                switch (sortFilter) {
                    case 'name':
                        return `${a.firstName || ''} ${a.lastName || ''}`.localeCompare(`${b.firstName || ''} ${b.lastName || ''}`);
                    case 'date':
                        return new Date(b.createdAt) - new Date(a.createdAt);
                    case 'revenue':
                        return (b.totalSpent || 0) - (a.totalSpent || 0);
                    case 'appointments':
                        return (b.appointmentCount || 0) - (a.appointmentCount || 0);
                    default:
                        return 0;
                }
            });
            
            displayCustomers(filtered);
        }
        
        // Clear filters
        function clearFilters() {
            document.getElementById('statusFilter').value = '';
            document.getElementById('searchFilter').value = '';
            document.getElementById('sortFilter').value = 'name';
            displayCustomers(customers);
        }
        
        // Modal functions
        function openAddModal() {
            currentEditId = null;
            document.getElementById('modalTitle').textContent = 'Add New Customer';
            document.getElementById('customerForm').reset();
            document.getElementById('customerModal').style.display = 'block';
        }
        
        function closeModal() {
            document.getElementById('customerModal').style.display = 'none';
            currentEditId = null;
        }
        
        // Edit customer
        async function editCustomer(id) {
            const customer = customers.find(c => c.id === id);
            if (!customer) return;
            
            currentEditId = id;
            document.getElementById('modalTitle').textContent = 'Edit Customer';
            
            // Fill form
            document.getElementById('firstName').value = customer.firstName || '';
            document.getElementById('lastName').value = customer.lastName || '';
            document.getElementById('email').value = customer.email || '';
            document.getElementById('phone').value = customer.phone || '';
            document.getElementById('address').value = customer.address || '';
            document.getElementById('city').value = customer.city || '';
            document.getElementById('state').value = customer.state || '';
            document.getElementById('zipCode').value = customer.zipCode || '';
            document.getElementById('notes').value = customer.notes || '';
            document.getElementById('status').value = customer.status || 'active';
            
            document.getElementById('customerModal').style.display = 'block';
        }
        
        // Save customer
        async function saveCustomer(event) {
            event.preventDefault();
            
            const formData = new FormData(event.target);
            const customerData = {
                firstName: formData.get('firstName'),
                lastName: formData.get('lastName'),
                email: formData.get('email'),
                phone: formData.get('phone'),
                address: formData.get('address'),
                city: formData.get('city'),
                state: formData.get('state'),
                zipCode: formData.get('zipCode'),
                notes: formData.get('notes'),
                status: formData.get('status'),
                updatedAt: new Date()
            };
            
            try {
                showLoading();
                if (currentEditId) {
                    await db.collection('customers').doc(currentEditId).update(customerData);
                    showNotification('Customer updated successfully', 'success');
                } else {
                    customerData.createdAt = new Date();
                    customerData.totalSpent = 0;
                    customerData.appointmentCount = 0;
                    await db.collection('customers').add(customerData);
                    showNotification('Customer created successfully', 'success');
                }
                
                closeModal();
                loadCustomers();
                hideLoading();
            } catch (error) {
                console.error('Error saving customer:', error);
                hideLoading();
                showNotification('Error saving customer', 'error');
            }
        }
        
        // View customer details
        function viewCustomerDetails(id) {
            const customer = customers.find(c => c.id === id);
            if (!customer) return;
            
            // Create a detailed view modal or navigate to customer details page
            alert(`Customer Details:\nName: ${customer.firstName} ${customer.lastName}\nEmail: ${customer.email}\nPhone: ${customer.phone}\nAddress: ${customer.address}\nStatus: ${customer.status}\nTotal Spent: $${(customer.totalSpent || 0).toFixed(2)}`);
        }
        
        // Delete customer
        async function deleteCustomer(id) {
            if (!confirm('Are you sure you want to delete this customer?')) return;
            
            try {
                showLoading();
                await db.collection('customers').doc(id).delete();
                showNotification('Customer deleted successfully', 'success');
                loadCustomers();
                hideLoading();
            } catch (error) {
                console.error('Error deleting customer:', error);
                hideLoading();
                showNotification('Error deleting customer', 'error');
            }
        }
        
        // Export customers
        function exportCustomers() {
            const csvContent = "data:text/csv;charset=utf-8," 
                + "First Name,Last Name,Email,Phone,Address,City,State,ZIP,Status,Join Date,Total Spent\n"
                + customers.map(c => 
                    `"${c.firstName || ''}","${c.lastName || ''}","${c.email || ''}","${c.phone || ''}","${c.address || ''}","${c.city || ''}","${c.state || ''}","${c.zipCode || ''}","${c.status || ''}","${formatDate(c.createdAt)}","${c.totalSpent || 0}"`
                ).join("\n");
            
            const encodedUri = encodeURI(csvContent);
            const link = document.createElement("a");
            link.setAttribute("href", encodedUri);
            link.setAttribute("download", "customers.csv");
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
        
        // Utility functions
        function formatDate(date) {
            if (!date) return 'N/A';
            try {
                if (date.toDate) {
                    return date.toDate().toLocaleDateString();
                }
                return new Date(date).toLocaleDateString();
            } catch (error) {
                return 'Invalid Date';
            }
        }
        
        function showLoading() {
            const loading = document.createElement('div');
            loading.id = 'loading';
            loading.innerHTML = '<div style="position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.5);display:flex;align-items:center;justify-content:center;z-index:9999;"><div style="background:white;padding:2rem;border-radius:8px;"><i class="fas fa-spinner fa-spin"></i> Loading...</div></div>';
            document.body.appendChild(loading);
        }
        
        function hideLoading() {
            const loading = document.getElementById('loading');
            if (loading) loading.remove();
        }
        
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed; top: 20px; right: 20px; 
                background: ${type === 'error' ? '#f44336' : type === 'success' ? '#4caf50' : '#2196f3'}; 
                color: white; padding: 1rem; border-radius: 8px; z-index: 10000;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            `;
            notification.textContent = message;
            document.body.appendChild(notifi
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const hamburger = document.querySelector('.hamburger');
            const nav = document.querySelector('#nav-menu');
            const navLinks = document.querySelector('.nav-links');
            const body = document.body;

            if (hamburger) {
                hamburger.addEventListener('click', function() {
                    const isExpanded = hamburger.getAttribute('aria-expanded') === 'true';
                    hamburger.classList.toggle('active');
                    nav.classList.toggle('active');
                    navLinks.classList.toggle('active');
                    body.classList.toggle('menu-open');
                    hamburger.setAttribute('aria-expanded', !isExpanded);
                });

                document.addEventListener('click', function(event) {
                    const isClickInside = nav.contains(event.target) || hamburger.contains(event.target);
                    if (!isClickInside && nav.classList.contains('active')) {
                        hamburger.classList.remove('active');
                        nav.classList.remove('active');
                        navLinks.classList.remove('active');
                        body.classList.remove('menu-open');
                        hamburger.setAttribute('aria-expanded', 'false');
                    }
                });

                document.addEventListener('keydown', function(event) {
                    if (event.key === 'Escape' && nav.classList.contains('active')) {
                        hamburger.classList.remove('active');
                        nav.classList.remove('active');
                        navLinks.classList.remove('active');
                        body.classList.remove('menu-open');
                        hamburger.setAttribute('aria-expanded', 'false');
                    }
                });

                const navItems = navLinks.querySelectorAll('a');
                navItems.forEach(link => {
                    link.addEventListener('click', function() {
                        if (nav.classList.contains('active')) {
                            hamburger.classList.remove('active');
                            nav.classList.remove('active');
                            navLinks.classList.remove('active');
                            body.classList.remove('menu-open');
                            hamburger.setAttribute('aria-expanded', 'false');
                        }
                    });
                });
            }
        });
    </script>
    cation);
            setTimeout(() =&gt; notification.remove(), 3000);
        }
        
        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('customerModal');
            if (event.target === modal) {
                closeModal();
            }
        }
        
        // Load customers when page loads
        document.addEventListener('DOMContentLoaded', loadCustomers);
    
    
    <!-- Mobile Admin Navigation -->
    <nav class="mobile-admin-nav">
        <div class="nav-buttons">
            <a href="admin-dashboard.html" class="nav-btn">
                <i class="fas fa-tachometer-alt"></i>
                <span>Dashboard</span>
            </a>
            <a href="staff.html" class="nav-btn">
                <i class="fas fa-users"></i>
                <span>Staff</span>
            </a>
            <a href="add-appointment.html" class="nav-btn">
                <i class="fas fa-calendar-plus"></i>
                <span>Appointments</span>
            </a>
            <a href="customers.html" class="nav-btn active">
                <i class="fas fa-user-friends"></i>
                <span>Customers</span>
            </a>
            <a href="inventory.html" class="nav-btn">
                <i class="fas fa-boxes"></i>
                <span>Inventory</span>
            </a>
        </div>
    </nav>


</body></html>