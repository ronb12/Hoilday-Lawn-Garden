import { initializeApp } from "https://www.gstatic.com/firebasejs/10.8.0/firebase-app.js"; import { getFirestore, collection, doc, getDoc, getDocs, query, orderBy, limit } from "https://www.gstatic.com/firebasejs/10.8.0/firebase-firestore.js"; import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js"; const firebaseConfig = { apiKey: "AIzaSyBXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", authDomain: "holliday-lawn-garden.firebaseapp.com", projectId: "holliday-lawn-garden", storageBucket: "holliday-lawn-garden.appspot.com", messagingSenderId: "123456789012", appId: "1:123456789012:web:abcdef1234567890" }; const app = initializeApp(firebaseConfig); const db = getFirestore(app); const auth = getAuth(app); console.log("modules/customer_dashboard.js loaded"); async function loadServiceHistory(userId) { try { console.log("Loading service history for user:", userId); const servicesRef = collection(db, "users", userId, "services"); const q = query(servicesRef, orderBy("date", "desc"), limit(1)); const querySnapshot = await getDocs(q); if (!querySnapshot.empty) { const lastService = querySnapshot.docs[0].data(); console.log("Last service found:", lastService); return { lastService: { type: lastService.type || "Service", date: lastService.date.toDate().toLocaleDateString() } }; } else { console.log("No services found for user"); return null; } } catch (error) { console.error("Error loading service history:", error); return null; } } async function loadUserData(userId) { try { console.log("Loading user data for:", userId); const userDoc = await getDoc(doc(db, "users", userId)); if (userDoc.exists()) { const userData = userDoc.data(); console.log("User data loaded:", userData); const serviceHistory = await loadServiceHistory(userId); const joinDate = userData.createdAt ? new Date(userData.createdAt).toLocaleDateString() : new Date(userData.metadata?.creationTime).toLocaleDateString(); return { ...userData, joinDate, serviceHistory }; } return null; } catch (error) { console.error("Error loading user data:", error); return null; } } function updateDashboardUI(userData) { console.log("=== Updating Dashboard UI ==="); console.log("User data:", userData); if (!userData) { console.error("No user data available"); return; } document.getElementById("profileName").textContent = userData.fullName || userData.displayName || "N/A"; document.getElementById("profileEmail").textContent = userData.email || "N/A"; document.getElementById("profilePhone").textContent = userData.phone || "N/A"; document.getElementById("profileAddress").textContent = `${userData.street || ""}, ${userData.city || ""}, ${userData.state || ""} ${userData.zip || ""}`; document.getElementById("profileJoinDate").textContent = userData.joinDate || "N/A"; if (userData.serviceHistory?.lastService) { document.getElementById("profileLastService").textContent = `${userData.serviceHistory.lastService.type} - ${userData.serviceHistory.lastService.date}`; } else { document.getElementById("profileLastService").textContent = "No services yet"; } } onAuthStateChanged(auth, async (user) => { if (user) { console.log("=== Firebase User Object ==="); console.log("User:", user); console.log("User metadata:", user.metadata); console.log("User creation time:", user.metadata.creationTime); console.log("User last sign in:", user.metadata.lastSignInTime); console.log("User display name:", user.displayName); console.log("User email:", user.email); console.log("User UID:", user.uid); const userData = await loadUserData(user.uid); updateDashboardUI(userData); } else { console.log("No user logged in"); window.location.href = "login.html"; } }); window.testServiceHistory = async () => { const user = auth.currentUser; if (user) { const serviceHistory = await loadServiceHistory(user.uid); console.log("Service history test result:", serviceHistory); } };
