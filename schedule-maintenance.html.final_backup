<!DOCTYPE html><html lang="en"><head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Schedule Maintenance - Holliday's Lawn &amp; Garden</title>
    <link rel="stylesheet" href="assets/css/main.css">
    <link rel="stylesheet" href="assets/css/admin-dashboard.css">
    <link rel="stylesheet" href="assets/css/mobile-enhancements.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        .maintenance-container {
            max-width: 1400px;
            margin: 2rem auto;
            padding: 2rem;
        }
        .maintenance-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }
        .maintenance-title {
            font-size: 2rem;
            font-weight: 700;
            color: #2c5530;
        }
        .btn-add-maintenance {
            background: #4caf50;
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 5px;
            cursor: pointer;
            border: none;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: background-color 0.3s ease;
        }
        .btn-add-maintenance:hover {
            background: #45a049;
        }
        .maintenance-calendar,
        .maintenance-list {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }
        
        /* Calendar Styles */
        .calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .calendar-controls {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .btn-calendar-nav {
            background: #4caf50;
            color: white;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.2s;
        }

        .btn-calendar-nav:hover {
            background: #45a049;
        }

        .current-month {
            font-size: 1.2rem;
            font-weight: 600;
            color: #2c5530;
            min-width: 120px;
            text-align: center;
        }

        .calendar-container {
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            overflow: hidden;
        }

        .calendar-weekdays {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            background: #f5f5f5;
            border-bottom: 1px solid #e0e0e0;
        }

        .weekday {
            padding: 0.75rem;
            text-align: center;
            font-weight: 600;
            color: #666;
            font-size: 0.9rem;
        }

        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
        }

        .calendar-day {
            min-height: 80px;
            border-right: 1px solid #e0e0e0;
            border-bottom: 1px solid #e0e0e0;
            padding: 0.5rem;
            position: relative;
            background: white;
            transition: background-color 0.2s;
        }

        .calendar-day:hover {
            background: #f9f9f9;
        }

        .calendar-day.other-month {
            background: #fafafa;
            color: #ccc;
        }

        .calendar-day.today {
            background: #e8f5e8;
            border: 2px solid #4caf50;
        }

        .day-number {
            font-weight: 600;
            margin-bottom: 0.25rem;
            color: #333;
        }

        .calendar-day.other-month .day-number {
            color: #ccc;
        }

        .maintenance-tasks {
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
        }

        .task-indicator {
            font-size: 0.7rem;
            padding: 0.1rem 0.3rem;
            border-radius: 3px;
            color: white;
            font-weight: 500;
            cursor: pointer;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 100%;
        }

        .task-indicator.scheduled {
            background: #2196f3;
        }

        .task-indicator.in-progress {
            background: #ff9800;
        }

        .task-indicator.completed {
            background: #4caf50;
        }

        .calendar-legend {
            display: flex;
            justify-content: center;
            gap: 2rem;
            margin-top: 1rem;
            flex-wrap: wrap;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.9rem;
        }

        .legend-color {
            width: 16px;
            height: 16px;
            border-radius: 3px;
        }

        .legend-color.scheduled {
            background: #2196f3;
        }

        .legend-color.in-progress {
            background: #ff9800;
        }

        .legend-color.completed {
            background: #4caf50;
        }

        /* Task Details Modal */
        .task-details-modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }

        .task-details-content {
            background-color: white;
            margin: 5% auto;
            padding: 2rem;
            border-radius: 8px;
            width: 90%;
            max-width: 500px;
            position: relative;
        }

        .task-details-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .close-task-details {
            font-size: 1.5rem;
            cursor: pointer;
            color: #666;
        }

        .close-task-details:hover {
            color: #333;
        }

        .task-detail-item {
            margin-bottom: 0.75rem;
        }

        .task-detail-label {
            font-weight: 600;
            color: #666;
            margin-bottom: 0.25rem;
        }

        .task-detail-value {
            color: #333;
        }

        .task-actions {
            display: flex;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .btn-task-action {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: background-color 0.2s;
        }

        .btn-edit-task {
            background: #2196f3;
            color: white;
        }

        .btn-edit-task:hover {
            background: #1976d2;
        }

        .btn-delete-task {
            background: #f44336;
            color: white;
        }

        .btn-delete-task:hover {
            background: #d32f2f;
        }
        
        /* Mobile responsive styles */
        @media (max-width: 768px) {
            .maintenance-container {
                padding: 1rem;
            }
            
            .maintenance-title {
                font-size: 1.8rem;
            }
            
            .maintenance-calendar,
            .maintenance-list {
                padding: 1.5rem;
                margin-bottom: 1.5rem;
            }

            /* Mobile Calendar Styles */
            .calendar-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }

            .calendar-controls {
                width: 100%;
                justify-content: space-between;
            }

            .current-month {
                font-size: 1.1rem;
                min-width: auto;
            }

            .calendar-day {
                min-height: 60px;
                padding: 0.25rem;
            }

            .day-number {
                font-size: 0.9rem;
            }

            .task-indicator {
                font-size: 0.6rem;
                padding: 0.05rem 0.2rem;
            }

            .calendar-legend {
                gap: 1rem;
            }

            .legend-item {
                font-size: 0.8rem;
            }

            .task-details-content {
                margin: 10% auto;
                padding: 1.5rem;
                width: 95%;
            }
        }
        
        @media (max-width: 480px) {
            .maintenance-container {
                padding: 0.5rem;
            }
            
            .maintenance-title {
                font-size: 1.6rem;
            }
            
            .maintenance-calendar,
            .maintenance-list {
                padding: 1rem;
            }

            /* Small Mobile Calendar Styles */
            .calendar-day {
                min-height: 50px;
                padding: 0.2rem;
            }

            .day-number {
                font-size: 0.8rem;
            }

            .task-indicator {
                font-size: 0.5rem;
                padding: 0.05rem 0.15rem;
            }

            .weekday {
                padding: 0.5rem 0.25rem;
                font-size: 0.8rem;
            }

            .calendar-legend {
                flex-direction: column;
                align-items: center;
                gap: 0.5rem;
            }

            .task-details-content {
                margin: 5% auto;
                padding: 1rem;
                width: 98%;
            }

            .task-actions {
                flex-direction: column;
                gap: 0.5rem;
            }

            .btn-task-action {
                width: 100%;
            }
        }
    </style>

    <style>
        /* Mobile Menu Styles */
        .hamburger {
            display: none;
            cursor: pointer;
            padding: 15px;
            z-index: 1000;
            position: relative;
            background: none;
            border: none;
            -webkit-tap-highlight-color: transparent;
            margin-right: 10px;
        }

        .hamburger span {
            display: block;
            width: 25px;
            height: 3px;
            background-color: #2e7d32;
            margin: 5px 0;
            transition: 0.3s;
        }

        .hamburger.active span:nth-child(1) {
            transform: rotate(-45deg) translate(-5px, 6px);
        }

        .hamburger.active span:nth-child(2) {
            opacity: 0;
        }

        .hamburger.active span:nth-child(3) {
            transform: rotate(45deg) translate(-5px, -6px);
        }

        @media (max-width: 768px) {
            .hamburger {
                display: block;
            }

            .nav-links {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100vh;
                background: rgba(255, 255, 255, 0.98);
                backdrop-filter: blur(8px);
                -webkit-backdrop-filter: blur(8px);
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                gap: 2.5rem;
                z-index: 1000;
                visibility: hidden;
                opacity: 0;
                transform: translateY(-100%);
                transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
                pointer-events: none;
                padding: 2rem;
            }

            .nav-links.active {
                visibility: visible;
                opacity: 1;
                transform: translateY(0);
                pointer-events: auto;
            }

            .nav-links a {
                font-size: 1.75rem;
                padding: 1rem 2rem;
                width: 100%;
                text-align: center;
                transition: all 0.3s ease;
                position: relative;
                color: #333333;
                font-weight: 600;
            }

            .nav-links a::after {
                content: '';
                position: absolute;
                bottom: 0;
                left: 50%;
                width: 0;
                height: 3px;
                background: #2e7d32;
                transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
                transform: translateX(-50%);
            }

            .nav-links a:hover::after,
            .nav-links a.active::after {
                width: 60%;
            }

            .nav-links a:hover {
                color: #2e7d32;
                transform: translateY(-2px);
            }

            body.menu-open {
                overflow: hidden;
                position: fixed;
                width: 100%;
                height: 100%;
            }
        }

        /* Prevent text selection during menu transitions */
        .nav-links {
            user-select: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
        }

        /* Ensure smooth scrolling on iOS */
        html {
            -webkit-overflow-scrolling: touch;
        }
    </style>
</head>
<body>
    <header class="admin-header">
        <div class="logo">
            <img src="assets/images/hollidays-logo.optimized-320.png" alt="Logo">
        </div>
        <nav class="admin-nav">
            <a href="admin-dashboard.html">Dashboard</a>
            <a href="staff.html">Staff</a>
            <a href="add-appointment.html">Appointments</a>
            <a href="schedule-maintenance.html">Maintenance</a>
            <a href="inventory.html">Inventory</a>
        </nav>
    
    <button class="hamburger" aria-label="Toggle menu" aria-expanded="false" aria-controls="nav-menu">
        <span></span>
        <span></span>
        <span></span>
    </button>
    <nav id="nav-menu">
        <ul class="nav-links">
            <li><a href="index.html">Home</a></li>
            <li><a href="about.html">About</a></li>
            <li><a href="services.html">Services</a></li>
            <li><a href="education.html">Education</a></li>
            <li><a href="faq.html">FAQ</a></li>
            <li><a href="contact.html">Contact</a></li>
            <li><a href="pay-your-bill.html">Pay Your Bill</a></li>
            <li class="login-buttons">
                <a href="login.html" class="btn-login btn-customer">
                    <i class="fas fa-user"></i>
                    Customer Login
                </a>
                <a href="admin-login.html" class="btn-login btn-admin">
                    <i class="fas fa-lock"></i>
                    Admin Login
                </a>
            </li>
        </ul>
    </nav>
</header>

    <!-- Mobile Admin Header -->
    <div class="mobile-admin-header">
        <div class="header-content">
            <h1 class="page-title">Maintenance</h1>
            <a href="admin-dashboard.html" class="dashboard-link">
                <i class="fas fa-tachometer-alt"></i>
                Dashboard
            </a>
        </div>
    </div>

    <!-- Back to Dashboard Button (Mobile) -->
    <button class="back-to-dashboard" onclick="window.location.href='admin-dashboard.html'" title="Back to Dashboard">
        <i class="fas fa-arrow-left"></i>
    </button>

    <div class="maintenance-container admin-page-content">
        <div class="maintenance-header">
            <h1 class="maintenance-title">Schedule Maintenance</h1>
            <button class="btn-add-maintenance">
                <i class="fas fa-plus"></i>
                Schedule New Maintenance
            </button>
        </div>

        <div class="maintenance-calendar">
            <div class="calendar-header">
                <h2>Maintenance Calendar</h2>
                <div class="calendar-controls">
                    <button class="btn-calendar-nav" id="prevMonth">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <span class="current-month" id="currentMonth">January 2024</span>
                    <button class="btn-calendar-nav" id="nextMonth">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </div>
            </div>
            <div class="calendar-container">
                <div class="calendar-weekdays">
                    <div class="weekday">Sun</div>
                    <div class="weekday">Mon</div>
                    <div class="weekday">Tue</div>
                    <div class="weekday">Wed</div>
                    <div class="weekday">Thu</div>
                    <div class="weekday">Fri</div>
                    <div class="weekday">Sat</div>
                </div>
                <div class="calendar-grid" id="calendarGrid">
                    <!-- Calendar days will be populated here -->
                </div>
            </div>
            <div class="calendar-legend">
                <div class="legend-item">
                    <span class="legend-color scheduled"></span>
                    <span>Scheduled</span>
                </div>
                <div class="legend-item">
                    <span class="legend-color in-progress"></span>
                    <span>In Progress</span>
                </div>
                <div class="legend-item">
                    <span class="legend-color completed"></span>
                    <span>Completed</span>
                </div>
            </div>
        </div>

        <div class="maintenance-list">
            <h2>Upcoming Maintenance</h2>
            <!-- Maintenance list will be populated here -->
            <p>No upcoming maintenance scheduled.</p>
        </div>
    </div>

    <!-- Add/Edit Maintenance Modal -->
    <div id="maintenanceModal" class="modal" style="display: none;">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Schedule New Maintenance</h2>
                <span class="close-modal">×</span>
            </div>
            <form id="maintenanceForm">
                <div class="form-group">
                    <label for="taskName">Task Name</label>
                    <input type="text" id="taskName" required="">
                </div>
                <div class="form-group">
                    <label for="maintenanceType">Maintenance Type</label>
                    <select id="maintenanceType" required="">
                        <option value="">Select Type</option>
                        <option value="equipment">Equipment</option>
                        <option value="customer-service">Customer Service</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="assignedTo">Assign to Staff</label>
                    <select id="assignedTo" required="">
                        <option value="">Select Staff</option>
                        <!-- Staff will be populated here -->
                    </select>
                </div>
                <div class="form-group">
                    <label for="maintenanceDate">Date</label>
                    <input type="date" id="maintenanceDate" required="">
                </div>
                <div class="form-group">
                    <label for="maintenanceStatus">Status</label>
                    <select id="maintenanceStatus" required="">
                        <option value="scheduled">Scheduled</option>
                        <option value="in-progress">In Progress</option>
                        <option value="completed">Completed</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="notes">Notes</label>
                    <textarea id="notes" rows="4"></textarea>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn-cancel">Cancel</button>
                    <button type="submit" class="btn-save">Save</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Task Details Modal -->
    <div id="taskDetailsModal" class="task-details-modal">
        <div class="task-details-content">
            <div class="task-details-header">
                <h3 id="taskDetailsTitle">Task Details</h3>
                <span class="close-task-details" onclick="closeTaskDetails()">×</span>
            </div>
            <div id="taskDetailsBody">
                <!-- Task details will be populated here -->
            </div>
            <div class="task-actions">
                <button class="btn-task-action btn-edit-task" id="editTaskBtn">Edit Task</button>
                <button class="btn-task-action btn-delete-task" id="deleteTaskBtn">Delete Task</button>
            </div>
        </div>
    </div>
    
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-app.js";
        import { getFirestore, collection, getDocs, addDoc, doc, updateDoc, deleteDoc, query, orderBy, where, serverTimestamp, getDoc } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-firestore.js";

        // Your web app's Firebase configuration
        const firebaseConfig = {
            apiKey: "AIzaSyACm0j7I8RX4ExIQRoejfk1HZMOQRGigBw",
            authDomain: "holiday-lawn-and-garden.firebaseapp.com",
            projectId: "holiday-lawn-and-garden",
            storageBucket: "holiday-lawn-and-garden.firebasestorage.app",
            messagingSenderId: "135322230444",
            appId: "1:135322230444:web:1a487b25a48aae07368909",
            measurementId: "G-KD6TBWR4ZT"
        };

        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);

        // Calendar variables
        let currentDate = new Date();
        let maintenanceTasks = [];
        let staffCache = {};

        document.addEventListener('DOMContentLoaded', () => {
            const addMaintenanceBtn = document.querySelector('.btn-add-maintenance');
            const modal = document.getElementById('maintenanceModal');
            const closeModalBtn = document.querySelector('.close-modal');
            const cancelBtn = document.querySelector('.btn-cancel');
            const prevMonthBtn = document.getElementById('prevMonth');
            const nextMonthBtn = document.getElementById('nextMonth');

            addMaintenanceBtn.addEventListener('click', () => {
                // Reset form for new entry
                maintenanceForm.reset();
                delete maintenanceForm.dataset.editingId;
                document.querySelector('#maintenanceModal h2').textContent = 'Schedule New Maintenance';
                modal.style.display = 'block';
            });

            closeModalBtn.addEventListener('click', () => {
                modal.style.display = 'none';
            });

            cancelBtn.addEventListener('click', () => {
                modal.style.display = 'none';
            });

            // Calendar navigation
            prevMonthBtn.addEventListener('click', () => {
                currentDate.setMonth(currentDate.getMonth() - 1);
                renderCalendar();
            });

            nextMonthBtn.addEventListener('click', () => {
                currentDate.setMonth(currentDate.getMonth() + 1);
                renderCalendar();
            });

            window.addEventListener('click', (event) => {
                if (event.target == modal) {
                    modal.style.display = 'none';
                }
                if (event.target == document.getElementById('taskDetailsModal')) {
                    closeTaskDetails();
                }
            });

            fetchStaff();
            fetchMaintenanceTasks();
            renderCalendar();
        });

        const maintenanceForm = document.getElementById('maintenanceForm');

        async function fetchStaff() {
            const staffSelect = document.getElementById('assignedTo');
            staffSelect.innerHTML = '<option value="">Loading...</option>';
            try {
                const q = query(collection(db, "staff"), where("status", "==", "active"));
                const snapshot = await getDocs(q);
                let options = '<option value="">Select Staff</option>';
                snapshot.forEach(doc => {
                    const staff = doc.data();
                    options += `<option value="${doc.id}">${staff.firstName} ${staff.lastName}</option>`;
                });
                staffSelect.innerHTML = options;
            } catch (error) {
                console.error("Error fetching staff:", error);
                staffSelect.innerHTML = '<option value="">Could not load staff</option>';
            }
        }

        maintenanceForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const editingId = maintenanceForm.dataset.editingId;

            const taskData = {
                taskName: document.getElementById('taskName').value,
                maintenanceType: document.getElementById('maintenanceType').value,
                assignedTo: document.getElementById('assignedTo').value,
                date: new Date(document.getElementById('maintenanceDate').value),
                status: document.getElementById('maintenanceStatus').value,
                notes: document.getElementById('notes').value,
            };

            try {
                if (editingId) {
                    // Update existing task
                    const taskRef = doc(db, "maintenance", editingId);
                    await updateDoc(taskRef, taskData);
                } else {
                    // Add new task
                    taskData.createdAt = serverTimestamp();
                    await addDoc(collection(db, "maintenance"), taskData);
                }
                maintenanceForm.reset();
                delete maintenanceForm.dataset.editingId; // Clear editing id
                document.getElementById('maintenanceModal').style.display = 'none';
                fetchMaintenanceTasks(); // This will also update the calendar
            } catch (error) {
                console.error("Error saving maintenance task: ", error);
                alert('Error saving task. Please try again.');
            }
        });

        async function fetchMaintenanceTasks() {
            const maintenanceList = document.querySelector('.maintenance-list');
            maintenanceList.innerHTML = '<h2>Upcoming Maintenance</h2><p>Loading...</p>';
            try {
                const q = query(collection(db, "maintenance"), orderBy("date"));
                const snapshot = await getDocs(q);
                
                // Clear and populate maintenanceTasks array
                maintenanceTasks = [];
                
                if (snapshot.empty) {
                    maintenanceList.innerHTML = '<h2>Upcoming Maintenance</h2><p>No upcoming maintenance scheduled.</p>';
                    renderCalendar();
                    return;
                }
                
                let html = '<h2>Upcoming Maintenance</h2><table><thead><tr><th>Task</th><th>Assigned To</th><th>Date</th><th>Status</th><th>Actions</th></tr></thead><tbody>';
                
                const staffPromises = [];

                snapshot.forEach(doc => {
                    const task = doc.data();
                    // Add task to maintenanceTasks array with id
                    maintenanceTasks.push({
                        id: doc.id,
                        ...task
                    });
                    
                    if (task.assignedTo && !staffCache[task.assignedTo]) {
                        const staffDocRef = doc(db, 'staff', task.assignedTo);
                        const staffPromise = getDoc(staffDocRef).then(staffDoc => {
                            if (staffDoc.exists()) {
                                staffCache[task.assignedTo] = staffDoc.data();
                            }
                        });
                        staffPromises.push(staffPromise);
                    }
                });

                await Promise.all(staffPromises);

                snapshot.forEach(doc => {
                    const task = doc.data();
                    const staffMember = staffCache[task.assignedTo];
                    const staffName = staffMember ? `${staffMember.firstName} ${staffMember.lastName}` : 'N/A';
                    html += `
                        <tr>
                            <td>${task.taskName}</td>
                            <td>${staffName}</td>
                            <td>${task.date.toDate().toLocaleDateString()}</td>
                            <td>${task.status}</td>
                            <td>
                                <button class="btn-edit" data-id="${doc.id}">Edit</button>
                                <button class="btn-delete" data-id="${doc.id}">Delete</button>
                            </td>
                        </tr>
                    `;
                });
                html += '</tbody></table>';
                maintenanceList.innerHTML = html;

                // Add event listeners for edit and delete buttons
                addTableButtonListeners();
                
                // Update calendar with new data
                renderCalendar();

            } catch (error) {
                console.error("Error fetching maintenance tasks:", error);
                maintenanceList.innerHTML = '<h2>Upcoming Maintenance</h2><p>Error loading tasks.</p>';
            }
        }

        function addTableButtonListeners() {
            const deleteButtons = document.querySelectorAll('.btn-delete');
            deleteButtons.forEach(button => {
                button.addEventListener('click', async (e) => {
                    const docId = e.target.dataset.id;
                    if (confirm('Are you sure you want to delete this task?')) {
                        try {
                            await deleteDoc(doc(db, "maintenance", docId));
                            fetchMaintenanceTasks();
                        } catch (error) {
                            console.error("Error deleting task:", error);
                        }
                    }
                });
            });

            const editButtons = document.querySelectorAll('.btn-edit');
            editButtons.forEach(button => {
                button.addEventListener('click', async (e) => {
                    const docId = e.target.dataset.id;
                    const docRef = doc(db, "maintenance", docId);
                    const docSnap = await getDoc(docRef);
                    
                    if (docSnap.exists()) {
                        const task = docSnap.data();
                        document.querySelector('#maintenanceModal h2').textContent = 'Edit Maintenance Task';
                        document.getElementById('taskName').value = task.taskName;
                        document.getElementById('maintenanceType').value = task.maintenanceType;
                        document.getElementById('assignedTo').value = task.assignedTo;
                        document.getElementById('maintenanceDate').value = task.date.toDate().toISOString().split('T')[0];
                        document.getElementById('maintenanceStatus').value = task.status;
                        document.getElementById('notes').value = task.notes || '';
                        
                        // Store the id of the document being edited
                        maintenanceForm.dataset.editingId = docId;
                        
                        document.getElementById('maintenanceModal').style.display = 'block';
                    }
                });
            });
        }

        // Calendar Functions
        function renderCalendar() {
            const calendarGrid = document.getElementById('calendarGrid');
            const currentMonthElement = document.getElementById('currentMonth');
            
            // Update month display
            const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
                               'July', 'August', 'September', 'October', 'November', 'December'];
            currentMonthElement.textContent = `${monthNames[currentDate.getMonth()]} ${currentDate.getFullYear()}`;
            
            // Get first day of month and number of days
            const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
            const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
            const startDate = new Date(firstDay);
            startDate.setDate(startDate.getDate() - firstDay.getDay());
            
            let calendarHTML = '';
            const today = new Date();
            
            // Generate calendar days
            for (let i = 0; i < 42; i++) {
                const currentDay = new Date(startDate);
                currentDay.setDate(startDate.getDate() + i);
                
                const isCurrentMonth = currentDay.getMonth() === currentDate.getMonth();
                const isToday = currentDay.toDateString() === today.toDateString();
                const dayNumber = currentDay.getDate();
                
                // Get tasks for this day
                const dayTasks = getTasksForDate(currentDay);
                
                let dayClass = 'calendar-day';
                if (!isCurrentMonth) dayClass += ' other-month';
                if (isToday) dayClass += ' today';
                
                calendarHTML += `<div class="${dayClass}" data-date="${currentDay.toISOString().split('T')[0]}">`;
                calendarHTML += `<div class="day-number">${dayNumber}</div>`;
                
                if (dayTasks.length > 0) {
                    calendarHTML += '<div class="maintenance-tasks">';
                    dayTasks.forEach(task => {
                        calendarHTML += `<div class="task-indicator ${task.status}" onclick="showTaskDetails('${task.id}')" title="${task.taskName}">${task.taskName}</div>`;
                    });
                    calendarHTML += '</div>';
                }
                
                calendarHTML += '</div>';
            }
            
            calendarGrid.innerHTML = calendarHTML;
        }

        function getTasksForDate(date) {
            return maintenanceTasks.filter(task => {
                const taskDate = task.date.toDate ? task.date.toDate() : new Date(task.date);
                return taskDate.toDateString() === date.toDateString();
            });
        }

        // Task Details Functions
        window.showTaskDetails = async function(taskId) {
            const task = maintenanceTasks.find(t => t.id === taskId);
            if (!task) return;
            
            const modal = document.getElementById('taskDetailsModal');
            const title = document.getElementById('taskDetailsTitle');
            const body = document.getElementById('taskDetailsBody');
            const editBtn = document.getElementById('editTaskBtn');
            const deleteBtn = document.getElementById('deleteTaskBtn');
            
            title.textContent = task.taskName;
            
            // Get staff name
            let staffName = 'N/A';
            if (task.assignedTo && staffCache[task.assignedTo]) {
                const staff = staffCache[task.assignedTo];
                staffName = `${staff.firstName} ${staff.lastName}`;
            }
            
            const